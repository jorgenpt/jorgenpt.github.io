<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jørgen's Blog]]></title>
  <link href="https://jorgen.tjer.no/atom.xml" rel="self"/>
  <link href="https://jorgen.tjer.no/"/>
  <updated>2023-03-04T12:33:32-08:00</updated>
  <id>https://jorgen.tjer.no/</id>
  <author>
    <name><![CDATA[Jørgen Tjernø]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unreal Engine and Continuous Integration]]></title>
    <link href="https://jorgen.tjer.no/post/2023/03/04/unreal-ci/"/>
    <updated>2023-03-04T11:25:52-08:00</updated>
    <id>https://jorgen.tjer.no/post/2023/03/04/unreal-ci</id>
    <content type="html"><![CDATA[<p>Unreal Engine and continuous integration presents some unique challenges (shared
by some other game engines as well) and most CI tools aren&rsquo;t a great fit for
those, so this post enumerates what those challenges are and what is
<strong>actually</strong> required of a CI tool for our use cases.</p>

<!-- more -->


<p>I am not a build engineer, but a well functioning continuous integration set-up
is an important part of a good developer user experience and required to build
high quality products. I tend to help with any part of the development process
that&rsquo;s valuable to the team, and so I often end up thinking about CI.</p>

<p>Since I&rsquo;ve been working with Unreal for about seven years, I figured I&rsquo;d outline
what outline what an Unreal workflow looks like andt hen rant a little bit about
what I don&rsquo;t have.</p>

<a name="A.common.Unreal.Engine.pipeline"></a>
<h2>A common Unreal Engine pipeline</h2>

<p>I&rsquo;ll use the term <strong>Host Platform</strong> to refer to the platform used for
development (or needed by a paired <strong>Target Platform</strong>), which will usually be
Windows and sometimes Linux or macOS.</p>

<p><strong>Target Platform</strong> refers to a platform the game runs on, which can be any
number of platforms like Windows, macOS, PS5, iOS, Android, etc. Some target
platforms require certain host platforms, like iOS requiring macOS or PS5
requiring Windows.</p>

<ul>
<li>Build each Host Platform editor

<ul>
<li><strong>Inputs</strong>: Source code</li>
<li><strong>Outputs</strong>: Editor binaries</li>
</ul>
</li>
<li>Publish Host Platform editor to team

<ul>
<li><strong>Inputs</strong>: Editor binaries</li>
<li><strong>Outputs</strong>: Binaries in Perforce (for UGS or just in-tree)</li>
</ul>
</li>
<li>Build binary for each Target Platform (this can include both clients and servers)

<ul>
<li><strong>Inputs</strong>: Source code</li>
<li><strong>Outputs</strong>: Game binaries</li>
</ul>
</li>
<li>Cook content for each Target Platform

<ul>
<li><strong>Inputs</strong>: Source content, editor binaries for paired Host Platform</li>
<li><strong>Outputs</strong>: Cooked content assets or PAK files</li>
</ul>
</li>
<li>Stage game for each Target Platform

<ul>
<li><strong>Inputs</strong>: Game binaries, cooked content</li>
<li><strong>Outputs</strong>: Staged game ready for publishing</li>
</ul>
</li>
<li>Publish game to storefronts

<ul>
<li><strong>Inputs</strong>: Staged game</li>
<li><strong>Outputs</strong>: Game on one or more storefront CDNs (Steam, EGS, etc)</li>
</ul>
</li>
</ul>


<p>Depending on your architecture, this might also have additional tools or
services building &amp; publishing in parallel (sometimes lockstep &ndash; e.g. we don&rsquo;t
publish new client binaries to the storefront unless the server binary
successfully published and the backend on-demand asset cook reported success).</p>

<a name="Unique.challenges.for.CI.in.games"></a>
<h2>Unique challenges for CI in games</h2>

<p>There are three things I consider to be somewhat unique to managing CI in games,
namely:</p>

<ol>
<li><strong>Artifact size</strong> &ndash; outputs from build steps range from hundreds of megabytes to
tens of gigabytes.</li>
<li><strong>Team visibility</strong> &ndash; the build process affects and is affected by a large
number of non-technical staff.</li>
<li><strong>Vaguely complicated dependency graphs</strong> &ndash; as you can see from the above, cooking only
requires editor binaries, but staging requires the output of cook and binaries.</li>
</ol>


<p><strong>Artifact size</strong> means that many common ways of pushing inputs &amp; outputs can
fall short, and you often require large backing stores &amp; good retention
policies. I&rsquo;ve only had bad experiences with Jenkins' artifact management, and
usually we just fall back on pushing things to S3 directly.</p>

<p><strong>Team visibility</strong> means that artists and designers can check in changes that
they both want to know when are available to e.g. playtests and that also
might cause the build to fail. We want these failures to be actionable by the
non-technical staff without needing to involve an engineer, and we want the
state of the build to be something they can inspect on their own.</p>

<p><strong>Vaguely complicated dependency graphs</strong> means that you ideally want to have
&ldquo;join points&rdquo; in your CI system, so that you can take the input from two
different jobs and combine them into a third job. In the past, we&rsquo;ve put
together hacks that rely on S3 markers to detect if the other job has finished,
but more commonly teams tend to either create large serial build pipelines
(build editor, then game binaries, then cook, then publish) or duplicate work
(e.g. build the paired host platform editor for each <strong>target</strong> platform so you
can cook without knowing when the host platform editor build is done).</p>

<a name="Shortcomings.of.existing.CI.tools"></a>
<h2>Shortcomings of existing CI tools</h2>

<p>First of all, most CI tools are not great at letting you filter the information
you expose to the end user. That means that there tends to be information
overload, both for engineers and more importantly, for non-engineers. I am
starting to come around on the notion that this is fine &ndash; we develop our own
tools to handle this. Things like badges in Unreal Game Sync and log-parsing
Slack bots that extract (more) actionable information.</p>

<p>Secondly, the way we would like to structure our dependency graphs to achieve
lower latency builds is as far as I&rsquo;ve seen not well supported in neither
Jenkins nor buildbot. Having to fight the CI system to achieve this means that
people tend to just .. not, and instead just throw more hardware at it.</p>

<p>Finally, especially Jenkins has this problem of wanting to solve too many of my
problems. There&rsquo;s a plugin for <strong>everything</strong>, but I rarely use a plugin without
finding that it has some shortcoming or doesn&rsquo;t fit my particular use case. When
that happens, it&rsquo;s usually quite painful &ndash; writing (or modifying) and deploying
plugins for Jenkins is a huge pain. At the end of the day, we usually write our
own tools, and I&rsquo;d much rather have a system that <strong>supports</strong> that, rather than
gets in the way of it.</p>

<a name="What.I.need.from.a.CI.tool"></a>
<h2>What I need from a CI tool</h2>

<p>In some ways, I think Jenkins and its ecosystem has too much complexity, and I&rsquo;d
love something a little leaner. With that in mind, I&rsquo;ve started to try to
distill what I actually want / need from a tool:</p>

<ol>
<li>Trigger a build when there&rsquo;s a Perforce change</li>
<li>Run a bunch of commands, some in parallel, some in serial, across a number of
nodes with different OSes (as an aside, I quite like GitHub Workflow&rsquo;s <a href="(https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#grouping-log-lines)">log
grouping</a> as a tool to let complex commands break up their
output for consumption)</li>
<li>Report failures in a way where I can automatically introspect and format it
(ideally some way of hooking into &ldquo;events&rdquo; from my build job, like failure)</li>
<li>Store secrets we can expose to jobs</li>
<li>Configuration of the build pipeline lives in SCM and doesn&rsquo;t require me to
re-deploy the CI itself (looking at you, buildbot)</li>
<li>Authentication (single sign-on with Google, specifically) with read-only or
read-write permissions</li>
<li>If we&rsquo;re being greedy, ability to spin up &amp; shut down EC2 instances for the
jobs to run on, or at least some way to hook into the host provisioning to do
this (we currently do this manually in our pipeline, because all the plugins
assume you have an AMI or a docker image, but I have like ..
already-provisioned nodes I want to use)</li>
</ol>


<p>I think that when it comes to a plugin / component architecture, I&rsquo;d much rather
have a simple structure where components can be included per-job, and are just
programs that run. Whether it&rsquo;s a shell script or a Rust program, it should be a
way to bundle &amp; configure tools that&rsquo;s no different than what I can do in my own
build definition, so that it&rsquo;s trivial to expand when you outgrow them or create
new ones from existing build definitions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flutter & GitHub Workflows: Deploying to TestFlight]]></title>
    <link href="https://jorgen.tjer.no/post/2022/02/26/flutter-github-workflows-and-testflight/"/>
    <updated>2022-02-26T00:00:00-08:00</updated>
    <id>https://jorgen.tjer.no/post/2022/02/26/flutter-github-workflows-and-testflight</id>
    <content type="html"><![CDATA[<p>When I wanted my personal <a href="https://flutter.dev/">Flutter</a> app to distribute iOS builds from a <a href="https://docs.github.com/en/actions">GitHub workflow</a> using <a href="https://developer.apple.com/testflight/">TestFlight</a>, I couldn&rsquo;t find a good cohesive guide to setting it up. The process was a bit nuanced and time consuming to get right.</p>

<p>In the end I created a GitHub workflow that automatically publishes whenever I push a versioned tag to GitHub &ndash; it builds the project, signs it, and publishes that build to TestFlight.</p>

<p>Below I&rsquo;ve provided the comprehensive set of steps you need to set this up from scratch, which I reproduced <a href="https://github.com/jorgenpt/flutter_github_example/tree/publish-to-testflight">using a public sample repository for your reference</a>.</p>

<!-- more -->


<a name="Requirements"></a>
<h2>Requirements</h2>

<p>In order to deploy builds to <a href="https://developer.apple.com/testflight/">TestFlight</a>, Apple requires that you have an <a href="https://developer.apple.com/programs/enroll/">Apple Developer Program</a> account &ndash; these cost $99/year.</p>

<p>I&rsquo;m also assuming you&rsquo;ve created a private or public repository on GitHub that you&rsquo;ll be using for version control where you can run the GitHub Workflow we&rsquo;ll set up.</p>

<a name="Setup.with.Apple"></a>
<h2>Setup with Apple</h2>

<p>These are the steps to configure your app in Apple&rsquo;s systems.</p>

<ol>
<li>Create a Bundle ID on <a href="https://developer.apple.com/account/resources/identifiers/add/bundleId">Apple Developer portal</a> &ndash; it can be an arbitrary bundle ID, and it doesn&rsquo;t require any specific Capabilities or App Services. Typically these are reverse-domain names, for my example I used <code>no.tjer.HelloWorld</code>.</li>
<li>Create an iOS App for your Bundle ID in <a href="https://appstoreconnect.apple.com/apps">App Store Connect</a> by clicking the <i class="fa fa-plus-circle" title="circled plus icon"></i> next to <em>Apps</em></li>
<li>Configure TestFlight on <a href="https://appstoreconnect.apple.com/apps">App Store Connect</a>, by navigating to your app and selecting the <em>TestFlight</em> tab.

<ol>
<li>Click the <i class="fa fa-plus-circle" title="circled plus icon"></i> next to <em>Internal Testing</em> to create a new internal group</li>
<li>Name it whatever you&rsquo;d prefer (e.g. Developers)</li>
<li>Click the new group in the sidebar and add yourself by clicking the <i class="fa fa-plus-circle" title="circled plus icon"></i> next to <em>Tester (0)</em></li>
</ol>
</li>
</ol>


<a name="Create..amp..set.up.a.Flutter.project.for.iOS"></a>
<h2>Create &amp; set up a Flutter project for iOS</h2>

<p>First we set up a project with Flutter with the iOS platform enabled and configure the project&rsquo;s Bundle ID</p>

<ol>
<li><p>Create a new Flutter project with iOS enabled, if you haven&rsquo;t already:</p>

<pre><code class="`sh"> flutter create --platforms ios --org no.tjer --project-name hello_world --description "Test for iOS deploy on GH" flutter_github_example
</code></pre></li>
<li>Navigate to your project directory (e.g. <code>flutter_github_example</code> in the above example) and open <code>ios/Runner.xcworkspace</code> in Xcode.</li>
<li>Make sure the Bundle Identifier for the project matches the one you created above by navigating to the Runner project in the left pane, clicking the Runner target, and then updating the <em>Bundle Identifier</em> under the <em>General</em> tab.</li>
</ol>


<a name="Configure.code.signing"></a>
<h2>Configure code signing</h2>

<p>To help managing code signing certificates and provisioning profiles, as well as the process of building &amp; signing, we&rsquo;ll use the excellent open source project <a href="https://fastlane.tools/">fastlane</a>. We&rsquo;ll be using a <strong>private</strong> GH repository to distribute the signing certificate to the builder (and to the team, if wanted).</p>

<a name="Setting.up..code.fastlane..code..for.your.project"></a>
<h3>Setting up <code>fastlane</code> for your project</h3>

<p>Please refer to the <a href="https://docs.fastlane.tools/getting-started/ios/setup/">fastlane setup docs</a> for more details, but here&rsquo;s a quick overview of what to do to configure Fastlane.</p>

<ol>
<li><p>Create a text-file called <code>ios/Gemfile</code> with the following content:</p>

<pre><code class="`rb"> source "https://rubygems.org"

 gem "fastlane"
 gem "cocoapods"
</code></pre></li>
<li><p>From a shell:</p>

<pre><code class="`sh"> brew install rbenv ruby-build # Set up rbenv to control the ruby version
 rbenv init
</code></pre></li>
<li><p>Close your terminal and re-open it for <code>rbenv</code> to be initialized, then navigate to your Flutter project and run:</p>

<pre><code class="`sh"> rbenv install -l 2&gt;&amp;1 | grep '^\d' | sort -n | tail -n 1 &gt; .ruby-version # Pick the most recent stable Ruby -- at the time of writing this is 3.1.1.
 rbenv install # Install the requested version of Ruby
 gem install bundler
 cd ios
 bundle lock --add-platform x86_64-darwin-19 # Make sure the platform list includes the GH Runner platform
 bundle exec fastlane init # Start the initial configuration of fastlane
</code></pre>

<ul>
<li>Choose <em>🚀 Automate App Store distribution</em> when <code>fastlane init</code> prompts you for what you&rsquo;re configuring, and sign in to your Apple Developer account.</li>
</ul>
</li>
<li>Make sure to add the following files to git:

<ul>
<li><code>.ruby-version</code> &ndash; the Ruby version we&rsquo;re using for fastlane</li>
<li><code>ios/fastlane/Appfile</code> &ndash; configuration for the iOS app store</li>
<li><code>ios/fastlane/Fastfile</code> &ndash; where we keep our fastlane recipe</li>
<li><code>ios/Gemfile</code> &ndash; the dependencies for fastlane</li>
<li><code>ios/Gemfile.lock</code> &ndash; specific version informatin for the gems specified in the Gemfile</li>
</ul>
</li>
</ol>


<a name="Configuring.App.Store.Connect.API.access.for.fastlane"></a>
<h3>Configuring App Store Connect API access for fastlane</h3>

<ol>
<li>Set up an App Store Connect API key <a href="https://appstoreconnect.apple.com/access/users">on the <em>Users &amp; Access</em> section of the site</a> by going to the <em>Keys</em> tab and then:

<ol>
<li>Click the <i class="fa fa-plus-circle" title="circled plus icon"></i> next to <em>Active (0)</em>.</li>
<li>Give it an identifying name (E.g. <em>Flutter GH Deploy</em> for the example project</li>
<li>Choose <em>Developer</em> as the Access for the key, and click Generate</li>
</ol>
</li>
<li>Refresh the page (navigating back to <em>Keys</em>) and choose to <em>Download API key</em> on the right side of the newly added key</li>
<li>Add the API key to your GitHub secrets &ndash; this allows GitHub Workflows to publish new TestFlight builds:

<ol>
<li>Navigate to your Flutter project&rsquo;s GitHub page (e.g. <a href="https://github.com/jorgenpt/flutter_github_example/">https://github.com/jorgenpt/flutter_github_example/</a> for my example repo).</li>
<li>Go to Settings, and select Secrets > Actions on the left side.</li>
<li>Add a <em>New repository secret</em> named <code>APP_STORE_CONNECT_API_KEY_KEY</code> (yes, <code>KEY</code> should be there twice) and paste in the contents of the API key file you downloaded from App Store Connect (the file is named something like <code>AuthKey_KEYID.p8</code>).</li>
</ol>
</li>
</ol>


<a name="Configuring.certificates..amp..provisioning.profiles"></a>
<h3>Configuring certificates &amp; provisioning profiles</h3>

<p>First, create a private repository <a href="https://github.com/new">on GitHub</a> and mark it as <em>Private</em>. In my case, I named it <code>certificates</code>. Don&rsquo;t initialize it with any files or licenses. Make a note of the SSH url for your repository, in my case that&rsquo;ll be <code>git@github.com:jorgenpt/certificates</code>.</p>

<ol>
<li><p>Navigate to your Flutter project in a shell and then run these commands:</p>

<pre><code class="`sh"> # These all need to be run from the ios platform of your Flutter project
 cd ios

 # For the following command, give `match init` the SSH URL for your repository (e.g.
 # git@github.com:myuser/certificates) and generate a random password (though make a note
 # of it for the next step).
 # You should add the generated Matchfile to Git.
 bundle exec fastlane match init 

 # Create an appstore distribution certificate &amp; provisioning profile
 bundle exec fastlane match appstore
 # Create a development certificate &amp; provisioning profile
 bundle exec fastlane match development
</code></pre></li>
<li>Make sure that your Xcode project is configured to use the same certificates:

<ol>
<li>Open <code>ios/Runner.xcworkspace</code> in Xcode</li>
<li>Navigate to the Runner project in the left pane, click the Runner target, and switch to the <em>Signing &amp; Capabilities</em> tab.</li>
<li>Uncheck <em>Automatically manage signing</em>.</li>
<li>Select <em>Release</em> in the top bar and set the provisioning profile to the one that starts with <em>match AppStore</em>.</li>
<li>Select <em>Debug</em> in the top bar and set the provisioning profile to the one that starts with <em>match Development</em>, and repeat this for <em>Profile</em> as well.
<img src="https://jorgen.tjer.no/images/flutter-github-testflight-configured-signing.png"></li>
</ol>
</li>
<li><p>Create a new SSH key that your workflow can use to access your GitHub certificates repository:</p>

<pre><code class="`sh"> ssh-keygen -C github.com:myuser/my_flutter_project_name -f ~/Desktop/id_rsa_build
</code></pre></li>
<li><p>Add the password you generated above &amp; the SSH key to your GitHub secrets &ndash; this allows GitHub Workflows to sign your build:</p>

<ol>
<li>Navigate to your Flutter project&rsquo;s GitHub page (e.g. <a href="https://github.com/jorgenpt/flutter_github_example/">https://github.com/jorgenpt/flutter_github_example/</a> for my example repo).</li>
<li>Go to Settings, and select Secrets > Actions on the left side.</li>
<li>Add a <em>New repository secret</em> named <code>MATCH_PASSWORD</code> and paste in the password you generated above.</li>
<li>Add a second <em>New repository secret</em> named <code>SSH_PRIVATE_KEY</code> and paste in the contents of <code>id_rsa_build</code> on your Desktop.</li>
</ol>
</li>
</ol>


<a name="Putting.it.all.together"></a>
<h2>Putting it all together</h2>

<p>Your GitHub repository&rsquo;s secrets should have three different secrets configured:</p>

<p><img src="https://jorgen.tjer.no/images/flutter-github-testflight-configured-secrets.png" width="640"></p>

<p>Now all that remains is to set up a fastlane <em>lane</em> that runs our build for us, and configure GitHub Workflows to invoke it:</p>

<ol>
<li>Create <code>.github/workflows/publish_ios.yml</code> in your Flutter repository from the <a href="https://raw.githubusercontent.com/jorgenpt/flutter_github_example/blogpost-testflight/.github/workflows/publish_ios.yml">reference publish_ios.yml in the example project</a>.</li>
<li>Create <code>ios/fastlane/Fastfile</code> in your Flutter repository from the <a href="https://raw.githubusercontent.com/jorgenpt/flutter_github_example/blogpost-testflight/ios/fastlane/Fastfile">reference Fastfile in the example project</a>.</li>
<li>Update <code>ios/fastlane/Fastfile</code> with your project details:

<ol>
<li><code>APP_IDENTIFIER</code> is the <em>Bundle Identifier</em> we created in <em>Setup with Apple</em>.</li>
<li><code>APPSTORECONNECT_ISSUER_ID</code> is the <em>Issuer ID</em> from the <em>Keys</em> section of <a href="https://appstoreconnect.apple.com/access/users"><em>Users and Access</em> on App Store Connect</a>.</li>
<li><code>APPSTORECONNECT_KEY_ID</code> is the <em>Key ID</em> from the specific key that we created in <em>Configuring App Store Connect API access for fastlane</em>, which you can look up in the <em>Keys</em> section of <a href="https://appstoreconnect.apple.com/access/users"><em>Users and Access</em> on App Store Connect</a>.</li>
</ol>
</li>
</ol>


<p>That&rsquo;s it! Now just create a git tag and push it to GitHub to start a build:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git tag v0.1.0 <span class="c"># This accepts any tag name  starting with &quot;v&quot;</span>
</span><span class='line'>git push --tags
</span></code></pre></td></tr></table></div></figure>


<p>You can see an example run <a href="https://github.com/jorgenpt/flutter_github_example/actions/workflows/publish_ios.yml">in the Actions tab of <code>flutter_github_example</code></a>.</p>

<p>These builds will by default be available to <em>Internal Testers</em> &ndash; you can use the App Store Connect app or website to release one of these builds to <em>External Testers</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Registering a (Rust) program as a browser on Windows]]></title>
    <link href="https://jorgen.tjer.no/post/2021/03/13/registering-a-rust-program-as-a-browser-on-windows/"/>
    <updated>2021-03-13T17:43:00-08:00</updated>
    <id>https://jorgen.tjer.no/post/2021/03/13/registering-a-rust-program-as-a-browser-on-windows</id>
    <content type="html"><![CDATA[<p>Registering as a potential web browser in modern Windows versions is mostly just about configuring a handful of registry keys, and there&rsquo;s nothing particularly tricky about doing so in Rust. Exactly what you need to configure (and why) can be hard to divine, and so I&rsquo;ll walk through the various registry keys that are expected, why, and show sample Rust code for setting them. In addition, there&rsquo;s a small call to <code>SHChangeNotify</code> that&rsquo;s required to refresh the OS' notion of available browsers, and that requires a snippet of unsafe Rust code.</p>

<p>I figured out all this while writing an app that pretends to be a browser and forwards URLs to the appropriate browser based on pattern matching. I named it <a href="https://github.com/jorgenpt/bichrome">bichrome</a>, and you can find a <a href="https://github.com/jorgenpt/bichrome/blob/04e8a4476105501032121c05f487f592c6ca68ce/src/windows.rs#L53">full example of URL registration in bichrome&rsquo;s src/windows.rs</a>, or keep reading to learn why these parts are needed and how to adapt it to your program!</p>

<!-- more -->


<p>You&rsquo;ll need to pick a couple of arbitrary identifiers. There&rsquo;s a &ldquo;canonical name&rdquo; for your browser (for <a href="https://github.com/jorgenpt/bichrome">bichrome</a> I chose <code>bichrome.exe</code>) and a program ID for your URL associations (for <a href="https://github.com/jorgenpt/bichrome">bichrome</a> I chose <code>bichromeHTML</code>), and these will be referred to as <code>CANONICAL_NAME</code> and <code>PROGID</code> in the samples. You&rsquo;ll also need <code>DISPLAY_NAME</code> and <code>DESCRIPTION</code>, which are simply user-facing names &amp; descriptions for your application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kr">const</span> <span class="n">CANONICAL_NAME</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span> <span class="o">=</span> <span class="s">&quot;bichrome.exe&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="n">PROGID</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span> <span class="o">=</span> <span class="s">&quot;bichromeHTML&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="n">DISPLAY_NAME</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span> <span class="o">=</span> <span class="s">&quot;bichrome&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="n">DESCRIPTION</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span> <span class="o">=</span> <span class="s">&quot;Pick the right Chrome profile for each URL&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The samples will use the <a href="https://crates.io/crates/const_format">const_format</a> crate for its <a href="https://docs.rs/const_format/0.2.13/const_format/macro.concatcp.html"><code>concatcp!</code></a> macro, the <a href="https://crates.io/crates/winreg">winreg</a> crate to write to the registry, and <a href="https://crates.io/crates/windows">windows-rs</a> to call <code>SHChangeNotify</code>.</p>

<a name="ProgID.registration"></a>
<h2>ProgID registration</h2>

<p>Registering the ProgID we&rsquo;ve picked lets us use the ProgID in file &amp; URL associations, so that Windows knows what commands to invoke when a particular file or URL gets handled by our ProgID.  The registration happens by configuring <code>SOFTWARE\CLASSES\&lt;PROGID&gt;</code> and it&rsquo;s subkeys <code>DefaultIcon</code> and <code>shell\open\command</code>. The latter is what gets invoked when our ProgID is asked to handle something.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">use</span> <span class="n">std</span><span class="o">::</span><span class="n">env</span><span class="o">::</span><span class="n">current_exe</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Find the current executable&#39;s name, which we&#39;ll use to register</span>
</span><span class='line'><span class="kd">let</span> <span class="n">exe_path</span> <span class="o">=</span> <span class="n">current_exe</span><span class="p">()</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">exe_name</span> <span class="o">=</span> <span class="n">exe_path</span>
</span><span class='line'>    <span class="p">.</span><span class="n">file_name</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="p">.</span><span class="n">to_str</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="n">flatten</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">unwrap_or_default</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">to_owned</span><span class="p">();</span>
</span><span class='line'><span class="kd">let</span> <span class="n">exe_path</span> <span class="o">=</span> <span class="n">exe_path</span><span class="p">.</span><span class="n">to_str</span><span class="p">().</span><span class="n">unwrap_or_default</span><span class="p">().</span><span class="n">to_owned</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We&#39;re assuming that the registration will use the icon resource of our EXE</span>
</span><span class='line'><span class="kd">let</span> <span class="n">icon_path</span> <span class="o">=</span> <span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">{}</span><span class="se">\&quot;</span><span class="s">,0&quot;</span><span class="p">,</span> <span class="n">exe_path</span><span class="p">);</span>
</span><span class='line'><span class="c1">// This is the command that will get invoked</span>
</span><span class='line'><span class="kd">let</span> <span class="n">open_command</span> <span class="o">=</span> <span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">{}</span><span class="se">\&quot;</span><span class="s"> </span><span class="se">\&quot;</span><span class="s">%1</span><span class="se">\&quot;</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">exe_path</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We write to the local user&#39;s registry, so that it does not require administrative</span>
</span><span class='line'><span class="c1">// privileges to update.</span>
</span><span class='line'><span class="kd">let</span> <span class="n">hkcu</span> <span class="o">=</span> <span class="n">RegKey</span><span class="o">::</span><span class="n">predef</span><span class="p">(</span><span class="n">HKEY_CURRENT_USER</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="n">PROGID_CLASS_PATH</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span> <span class="o">=</span> <span class="n">concatcp</span><span class="o">!</span><span class="p">(</span><span class="s-Raw">r&quot;SOFTWARE\Classes\&quot;</span><span class="p">,</span> <span class="n">PROGID</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="n">progid_class</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">hkcu</span><span class="p">.</span><span class="n">create_subkey</span><span class="p">(</span><span class="n">PROGID_CLASS_PATH</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">progid_class</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">DISPLAY_NAME</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="n">progid_class_defaulticon</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">progid_class</span><span class="p">.</span><span class="n">create_subkey</span><span class="p">(</span><span class="s">&quot;DefaultIcon&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">progid_class_defaulticon</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">icon_path</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="n">progid_class_shell_open_command</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">progid_class</span><span class="p">.</span><span class="n">create_subkey</span><span class="p">(</span><span class="s-Raw">r&quot;shell\open\command&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">progid_class_shell_open_command</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">open_command</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Configuring.the.Default.Programs"></a>
<h2>Configuring the Default Programs</h2>

<p>Default Programs is the user flow that Windows 10 uses to let the user configure defaults for their browser, email client, et cetera. You can read about it in detail <a href="https://docs.microsoft.com/en-us/windows/win32/shell/default-programs">on the MSDN page</a>.</p>

<p>To become a valid browser, we need to register some information about our application, let the OS know we&rsquo;re a browser-type application, tell it which URLs and file types we&rsquo;re capable of handling, and let it know how to launch, register, and unregister us.</p>

<p>First, we set up the high level information &ndash; display name, our icon, and name &amp; description:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kr">const</span> <span class="n">DPROG_PATH</span><span class="o">:</span> <span class="o">&amp;</span><span class="kt">str</span> <span class="o">=</span> <span class="n">concatcp</span><span class="o">!</span><span class="p">(</span><span class="s-Raw">r&quot;SOFTWARE\Clients\StartMenuInternet\&quot;</span><span class="p">,</span> <span class="n">CANONICAL_NAME</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="n">dprog</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">hkcu</span><span class="p">.</span><span class="n">create_subkey</span><span class="p">(</span><span class="n">DPROG_PATH</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">dprog</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">DISPLAY_NAME</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">dprog</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;LocalizedString&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">DISPLAY_NAME</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="n">dprog_defaulticon</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">dprog</span><span class="p">.</span><span class="n">create_subkey</span><span class="p">(</span><span class="s">&quot;DefaultIcon&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">dprog_defaulticon</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">icon_path</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="n">dprog_capabilites</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">dprog</span><span class="p">.</span><span class="n">create_subkey</span><span class="p">(</span><span class="s">&quot;Capabilities&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">dprog_capabilites</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;ApplicationName&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">DISPLAY_NAME</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">dprog_capabilites</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;ApplicationIcon&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">icon_path</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">dprog_capabilites</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;ApplicationDescription&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">DESCRIPTION</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we tell the OS we have a <a href="https://docs.microsoft.com/en-us/windows/win32/shell/default-programs#startmenu">StartMenuInternet capability</a>, and then link this browser&rsquo;s URL &amp; file associations to the program ID we chose (and registered above).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="n">dprog_capabilities_startmenu</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">dprog_capabilites</span><span class="p">.</span><span class="n">create_subkey</span><span class="p">(</span><span class="s">&quot;Startmenu&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">dprog_capabilities_startmenu</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;StartMenuInternet&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">CANONICAL_NAME</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Register for various URL protocols that our target browsers might support.</span>
</span><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="n">dprog_capabilities_urlassociations</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">dprog_capabilites</span><span class="p">.</span><span class="n">create_subkey</span><span class="p">(</span><span class="s">&quot;URLAssociations&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="n">protocol</span> <span class="k">in</span> <span class="o">&amp;</span><span class="p">[</span><span class="s">&quot;ftp&quot;</span><span class="p">,</span> <span class="s">&quot;http&quot;</span><span class="p">,</span> <span class="s">&quot;https&quot;</span><span class="p">,</span> <span class="s">&quot;webcal&quot;</span><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dprog_capabilities_urlassociations</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="n">protocol</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">PROGID</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Register for various file types, so that we&#39;ll be invoked for file:// URLs for these types (e.g.</span>
</span><span class='line'><span class="c1">// by `cargo doc --open`.)</span>
</span><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="n">dprog_capabilities_fileassociations</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">dprog_capabilites</span><span class="p">.</span><span class="n">create_subkey</span><span class="p">(</span><span class="s">&quot;FileAssociations&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="n">filetype</span> <span class="k">in</span> <span class="o">&amp;</span><span class="p">[</span>
</span><span class='line'>    <span class="s">&quot;.htm&quot;</span><span class="p">,</span> <span class="s">&quot;.html&quot;</span><span class="p">,</span> <span class="s">&quot;.pdf&quot;</span><span class="p">,</span> <span class="s">&quot;.shtml&quot;</span><span class="p">,</span> <span class="s">&quot;.svg&quot;</span><span class="p">,</span> <span class="s">&quot;.webp&quot;</span><span class="p">,</span> <span class="s">&quot;.xht&quot;</span><span class="p">,</span> <span class="s">&quot;.xhtml&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">]</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dprog_capabilities_fileassociations</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="n">filetype</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">PROGID</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To finalize the Default Programs configuration, we set up the <a href="https://docs.microsoft.com/en-us/windows/win32/shell/reg-middleware-apps#registering-installation-information">installation information</a> which allows the OS to register &amp; unregister us. You can read about the expectations for e.g. the reinstall command <a href="https://docs.microsoft.com/en-us/windows/win32/shell/reg-middleware-apps#the-reinstall-command">on this MSDN page</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// Set up reinstallation and show/hide icon commands (https://docs.microsoft.com/en-us/windows/win32/shell/reg-middleware-apps#registering-installation-information)</span>
</span><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="n">dprog_installinfo</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">dprog</span><span class="p">.</span><span class="n">create_subkey</span><span class="p">(</span><span class="s">&quot;InstallInfo&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">dprog_installinfo</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;ReinstallCommand&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">{}</span><span class="se">\&quot;</span><span class="s"> register&quot;</span><span class="p">,</span> <span class="n">exe_path</span><span class="p">))</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">dprog_installinfo</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;HideIconsCommand&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">{}</span><span class="se">\&quot;</span><span class="s"> hide-icons&quot;</span><span class="p">,</span> <span class="n">exe_path</span><span class="p">))</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">dprog_installinfo</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;ShowIconsCommand&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">{}</span><span class="se">\&quot;</span><span class="s"> show-icons&quot;</span><span class="p">,</span> <span class="n">exe_path</span><span class="p">))</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Only update IconsVisible if it hasn&#39;t been set already</span>
</span><span class='line'><span class="k">if</span> <span class="kd">let</span> <span class="nb">Err</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">dprog_installinfo</span><span class="p">.</span><span class="n">get_value</span><span class="o">::&lt;</span><span class="kt">u32</span><span class="p">,</span> <span class="n">_</span><span class="o">&gt;</span><span class="p">(</span><span class="s">&quot;IconsVisible&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dprog_installinfo</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;IconsVisible&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="mi">1</span><span class="k">u32</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="n">dprog_shell_open_command</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">dprog</span><span class="p">.</span><span class="n">create_subkey</span><span class="p">(</span><span class="s-Raw">r&quot;shell\open\command&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="n">dprog_shell_open_command</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">open_command</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Tying.it.all.together"></a>
<h2>Tying it all together</h2>

<p>Finally, we just need to create a <a href="https://docs.microsoft.com/en-us/windows/win32/shell/default-programs#registeredapplications">Registered Application</a> that maps our application name to the Default Programs capabilities we listed, and set up an app path for convenience sake &ndash; so that <code>myprogram.exe</code> can resolve to our program without needing to modify the <code>PATH</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="c1">// Set up a registered application for our Default Programs capabilities (https://docs.microsoft.com/en-us/windows/win32/shell/default-programs#registeredapplications)</span>
</span><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="n">registered_applications</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">hkcu</span><span class="p">.</span><span class="n">create_subkey</span><span class="p">(</span><span class="s-Raw">r&quot;SOFTWARE\RegisteredApplications&quot;</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="kd">let</span> <span class="n">dprog_capabilities_path</span> <span class="o">=</span> <span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s-Raw">r&quot;{}\Capabilities&quot;</span><span class="p">,</span> <span class="n">DPROG_PATH</span><span class="p">);</span>
</span><span class='line'><span class="n">registered_applications</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="n">DISPLAY_NAME</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dprog_capabilities_path</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Application Registration (https://docs.microsoft.com/en-us/windows/win32/shell/app-registration)</span>
</span><span class='line'><span class="kd">let</span> <span class="n">appreg_path</span> <span class="o">=</span> <span class="n">format</span><span class="o">!</span><span class="p">(</span><span class="s-Raw">r&quot;SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\{}&quot;</span><span class="p">,</span> <span class="n">exe_name</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="p">(</span><span class="n">appreg</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">hkcu</span><span class="p">.</span><span class="n">create_subkey</span><span class="p">(</span><span class="n">APPREG_PATH</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="c1">// This is used to resolve &quot;myprogram.exe&quot; -&gt; full path, if needed.</span>
</span><span class='line'><span class="n">appreg</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">exe_path</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span><span class='line'><span class="c1">// UseUrl indicates that we don&#39;t need the shell to download a file for us -- we can handle direct</span>
</span><span class='line'><span class="c1">// HTTP URLs.</span>
</span><span class='line'><span class="n">appreg</span><span class="p">.</span><span class="n">set_value</span><span class="p">(</span><span class="s">&quot;UseUrl&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="mi">1</span><span class="k">u32</span><span class="p">)</span><span class="o">?</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Letting.the.OS.know.we.re.good.to.go"></a>
<h2>Letting the OS know we&rsquo;re good to go</h2>

<p>As one last step, we <a href="https://docs.microsoft.com/en-us/windows/win32/shell/default-programs#becoming-the-default-browser">notify the OS that the available URL handlers have changed</a>, so that it will refresh the list of browsers, and if this is our first registration, automatically prompt the user if they&rsquo;d like to change their default.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="kn">mod</span> <span class="n">windows_bindings</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">::</span><span class="n">windows</span><span class="o">::</span><span class="n">include_bindings</span><span class="o">!</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kn">use</span> <span class="n">windows_bindings</span><span class="o">::</span><span class="n">windows</span><span class="o">::</span><span class="n">win32</span><span class="o">::</span><span class="n">shell</span><span class="o">::</span><span class="p">{</span><span class="n">SHChangeNotify</span><span class="p">,</span> <span class="n">SHCNE_ID</span><span class="p">,</span> <span class="n">SHCNF_FLAGS</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Notify the shell about the updated URL associations. (https://docs.microsoft.com/en-us/windows/win32/shell/default-programs#becoming-the-default-browser)</span>
</span><span class='line'><span class="k">unsafe</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">SHChangeNotify</span><span class="p">(</span>
</span><span class='line'>        <span class="n">SHCNE_ID</span><span class="o">::</span><span class="n">SHCNE_ASSOCCHANGED</span><span class="p">,</span>
</span><span class='line'>        <span class="n">SHCNF_FLAGS</span><span class="o">::</span><span class="n">SHCNF_DWORD</span> <span class="o">|</span> <span class="n">SHCNF_FLAGS</span><span class="o">::</span><span class="n">SHCNF_FLUSH</span><span class="p">,</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">ptr</span><span class="o">::</span><span class="n">null_mut</span><span class="p">(),</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">ptr</span><span class="o">::</span><span class="n">null_mut</span><span class="p">(),</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Setting up windows-rs is a little bit heavier weight than most crates &ndash; you can find documentation on <a href="https://crates.io/crates/windows">the crates.io page for the windows crate</a>, but a minimal example is shown below. First, add the following to your <code>Cargo.toml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='toml'><span class='line'><span class="p">[</span><span class="n">dependencies</span><span class="p">]</span>
</span><span class='line'><span class="n">windows</span> <span class="o">=</span> <span class="s">&quot;0.4.0&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="n">build-dependencies</span><span class="p">]</span>
</span><span class='line'><span class="n">windows</span> <span class="o">=</span> <span class="s">&quot;0.4.0&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you&rsquo;ll also need to specify a <code>build.rs</code> script that generates the appropriate bindings for you:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="k">fn</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">windows</span><span class="o">::</span><span class="n">build</span><span class="o">!</span><span class="p">(</span><span class="n">windows</span><span class="o">::</span><span class="n">win32</span><span class="o">::</span><span class="n">shell</span><span class="o">::*</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<a name="Being.suave.about.it"></a>
<h2>Being suave about it</h2>

<p>By default Rust applications use the &ldquo;console&rdquo; subsystem on Windows &ndash; this means you can more or less always write to the console and have it show up somewhere. The downside of this is that if the application is run outside of a console window, e.g. by double-clicking the EXE or when invoked as a browser by the OS, you&rsquo;ll see a console window pop up. Luckily, since Rust 1.18, it&rsquo;s quite trivial to switch to the Windows subsystem. Just add the following to the top of your <code>main.rs</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="err">#</span><span class="o">!</span><span class="p">[</span><span class="n">windows_subsystem</span> <span class="o">=</span> <span class="s">&quot;windows&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<a name="In.closing"></a>
<h2>In closing</h2>

<p>If you&rsquo;re looking to just drop this in to your own project, I would suggest you look at <a href="https://github.com/jorgenpt/bichrome/blob/04e8a4476105501032121c05f487f592c6ca68ce/src/windows.rs#L53">the full example in bichrome&rsquo;s src/windows.rs</a>, which has all the various parts in two methods (<code>register_urlhandler</code> and <code>refresh_shell</code>).</p>

<p>Once you&rsquo;ve done all this, your application should show up like any other browser in the <code>Default apps</code> selection in Windows 10, like <a href="https://github.com/jorgenpt/bichrome">bichrome</a> in this screenshot:</p>

<p><img class="center" src="https://jorgen.tjer.no/images/default_apps.png"></p>

<p>Please let me know if you have any questions or just to say that this was helpful to you! You can leave a comment, hit me up on <a href="https://twitter.com/jorgenpt">twitter (@jorgenpt)</a>, or send me <a href="mailto:jorgenpt@gmail.com">a quick email</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AIE presentation slides]]></title>
    <link href="https://jorgen.tjer.no/post/2019/01/10/aie-presentation/"/>
    <updated>2019-01-10T17:31:00-07:00</updated>
    <id>https://jorgen.tjer.no/post/2019/01/10/aie-presentation</id>
    <content type="html"><![CDATA[<p>I gave a brief presentation followed by a Q&amp;A for a class at the <a href="https://aie.edu/">Academy of
Interactive Entertainment</a> at their Seattle campus. It was
a part of their &ldquo;Lunchbox Speaker&rdquo; series where they host various speakers
from the game development industry.</p>

<p>It talks about some of the challenges we at <a href="https://www.undeadlabs.com">Undead Labs</a>
encountered developing State of Decay 2, and both practical steps we took to address it as
well as some of my opinions on how to avoid or address those things in the future.</p>

<p>Here are the slides from that talk:</p>

<ul>
<li><a href="https://jorgen.tjer.no/static/2019-01-09-aie.pdf">PDF slides</a></li>
<li><a href="https://jorgen.tjer.no/static/2019-01-09-aie-with-notes.pdf">PDF slides with speaker notes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Experience America presentation slides]]></title>
    <link href="https://jorgen.tjer.no/post/2015/10/21/experience-america-presentation/"/>
    <updated>2015-10-21T09:30:00-07:00</updated>
    <id>https://jorgen.tjer.no/post/2015/10/21/experience-america-presentation</id>
    <content type="html"><![CDATA[<p>I gave a brief presentation followed by a Q&amp;A for a class of Danish high
school students who were in Seattle via the Experience America program.
As a part of that process, local game developers were invited to speak.</p>

<p>Here are the slides from that talk:</p>

<ul>
<li><a href="https://jorgen.tjer.no/static/2015-10-21-experience-america.pdf">PDF slides</a></li>
<li><a href="https://jorgen.tjer.no/static/2015-10-21-experience-america-with-notes.pdf">PDF slides with speaker notes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[steam-runtime without Steam]]></title>
    <link href="https://jorgen.tjer.no/post/2014/05/28/steam-runtime-without-steam/"/>
    <updated>2014-05-28T08:28:28-07:00</updated>
    <id>https://jorgen.tjer.no/post/2014/05/28/steam-runtime-without-steam</id>
    <content type="html"><![CDATA[<p><strong>Updated 2014-06-03:</strong> Added information about <code>STEAM_RUNTIME</code> variable under <a href="https://jorgen.tjer.no/post/2014/05/28/steam-runtime-without-steam/#Runtime.dependencies.of.the.steam-runtime">the new embedded search path subsection</a>.</p>

<p><strong>Updated 2016-01-03:</strong> Fixed dead links to Valve&rsquo;s steam-runtime patches collection.</p>

<p>If you&rsquo;ve ever had customers report errors like these, then this post
might be for you:</p>

<ul>
<li><code>./foo: /usr/lib/x86_64-linux-gnu/libstdc++.so.6: version
`GLIBCXX_3.4.16` not found (required by ./foo)</code></li>
<li><code>./foo: error while loading shared libraries: libSDL2-2.0.so.0:
 cannot open shared object file: No such file or directory</code></li>
</ul>


<p>In my <a href="https://jorgen.tjer.no/post/2014/05/26/self-contained-game-distribution-on-linux/">previous post about self-contained distributions</a>,
we started looking at how the <a href="https://github.com/ValveSoftware/steam-runtime">steam-runtime project</a>
works. In this post, we&rsquo;ll make the steam-runtime work for us in a
self-contained distribution that you can ship without depending on
Steam.</p>

<p>I will present two possible ways of doing it:</p>

<ol>
<li>Using <a href="https://jorgen.tjer.no/post/2014/05/28/steam-runtime-without-steam/#Solution.1:.The.wrapper.script">a wrapper script</a>.</li>
<li>Using <a href="https://jorgen.tjer.no/post/2014/05/28/steam-runtime-without-steam/#Solution.2:.Embedded.search.path">an &ldquo;embedded search path&rdquo;</a>.</li>
</ol>


<p>If you&rsquo;re wondering why you would prefer the second approach, that
section starts with a rundown of the benefits inherent to it!</p>

<!-- more -->


<a name="Assumptions"></a>
<h2>Assumptions</h2>

<p>The remainder of this article makes a few assumptions, no matter which
of the two approaches you choose.</p>

<p>I assume that you&rsquo;ve extracted the steam-runtime into a directory named
<code>steam-runtime/</code> next to the executable. The easiest way to do this is
to use the two helper scripts I wrote, see the section on <a href="https://jorgen.tjer.no/post/2014/05/28/steam-runtime-without-steam/#Preparing.the.steam-runtime.for.repackaging">repackaging
the steam-runtime</a>. You should include the steam-runtime
directory when distributing <em>outside of</em> Steam, and distribute the exact
same package <strong>except</strong> for the steam-runtime directory when
distributing <em>through</em> Steam.</p>

<p>Excluding the steam-runtime can be done trivially inside your Steam
depot build script. Assuming you&rsquo;re building a depot from <code>build/linux</code>
(relative to your ContentRoot) with the binary living directly in that
directory, your script would contain something like this:</p>

<pre><code>"DepotBuildConfig"
{
    "DepotID" "1001"

    "FileMapping"
    {
        "LocalPath" "build\linux\*"
        "DepotPath" "."
        "recursive" "1"
    }

    "FileExclusion" "build\linux\steam-runtime"
}
</code></pre>

<p>It&rsquo;s worth noting that the FileExclusion is matched against your local
paths, not your depot paths, and it is implicitly recursive (the latter
doesn&rsquo;t seem to be documented <a href="https://partner.steamgames.com/documentation/steampipe">in the SteamPipe docs</a> as
of 2014-05-28.)</p>

<p>I assume you&rsquo;re already building your game with <a href="https://github.com/ValveSoftware/steam-runtime">the steam-runtime
SDK</a>. This is how you make sure your game is depending on
the right version of the libraries.</p>

<p>Finally, for simplicity sake I&rsquo;m also assuming you don&rsquo;t mind ~100MB of
additional data in your package, which is the size of the entire
steam-runtime for one architecture. If this is too much for you, you can
always manually strip out any unneeded libraries from the runtime.</p>

<a name="Preparing.the.steam-runtime.for.repackaging"></a>
<h3>Preparing the steam-runtime for repackaging</h3>

<p>I&rsquo;ve created <a href="https://github.com/jorgenpt/steam-runtime-helpers">two helper scripts</a>, one to make sure
you&rsquo;ve <a href="https://github.com/jorgenpt/steam-runtime-helpers/blob/master/update_runtime.sh">downloaded the latest runtime</a>, and one to <a href="https://github.com/jorgenpt/steam-runtime-helpers/blob/master/extract_runtime.sh">extract
the parts of the runtime you care about</a> (to reduce runtime
size from 400MB to 100MB, by excluding documentation and whatever
architecture you&rsquo;re <strong>not</strong> using.)</p>

<p>You would invoke them like this to download the latest runtime and
extract the 64bit libraries from it into the <code>build/linux/steam-runtime</code>
directory.</p>

<pre><code>./update_runtime.sh
./extract_runtime.sh steam-runtime-release_latest.tar.xz amd64 build/linux/steam-runtime
</code></pre>

<a name="Solution.1:.The.wrapper.script"></a>
<h2>Solution 1: The wrapper script</h2>

<p>The least invasive way to accomplish what we want is to basically do
what Steam does: Set up the runtime environment variables via
<code>LD_LIBRARY_PATH</code>, and launch the main binary.</p>

<p>To make it even easier, I&rsquo;ve put together <a href="https://github.com/jorgenpt/steam-runtime-helpers/blob/master/launch_wrapper.sh">a little wrapper
script</a> that does exactly that. Name the script <code>foo.sh</code>
or <code>foo</code>, and put it in the same directory as your executable, which it
will then assume is named <code>foo.bin</code>.</p>

<p>The script should gracefully handle being launched from Steam, as it&rsquo;ll
detect that the runtime has already been set up.</p>

<a name="Solution.2:.Embedded.search.path"></a>
<h2>Solution 2: Embedded search path</h2>

<p>First off, why would you prefer this approach to using a wrapper script?</p>

<ul>
<li>Shell scripts are fragile &ndash; it&rsquo;s easy to get something wrong, like
incorrectly handling spaces in filenames, or something equally silly.</li>
<li>A shell script gives you another file that you have to be careful to
maintain the executable bit on.</li>
<li>Shell scripts are text files, and your VCS / publishing process might
mangle the line endings, which makes everyone sad (<code>bad interpreter:
/bin/bash^M: no such file or directory</code>)</li>
<li>A customer could accidentally launch the wrong thing (i.e. the
<code>.bin</code>-file rather than the script), which might work on some
machines, fail in subtle ways on other machines, and not work at all
on the rest of them.</li>
<li>Launching the game in a debugger requires more complexity in your
script, like the <code>--gdb</code> logic in
<a href="https://github.com/jorgenpt/steam-runtime-helpers/blob/master/launch_wrapper.sh">launcher_wrapper.sh</a>, to make the game, but not the
debugger, pick up the runtime libraries.</li>
<li>If you launch any system binaries from outside of the runtime without
taking care to unset <code>LD_LIBRARY_PATH</code>, they will implicitly be using
the runtime libraries, which might not cause problems.</li>
</ul>


<p>The alternative to the wrapper script is using <code>DT_RPATH</code>, which I&rsquo;ve
talked about in <a href="https://jorgen.tjer.no/post/2014/05/20/dt-rpath-ld-and-at-rpath-dyld/">a previous blog post</a>. This approach is a
little more invasive to your build process, but overall it should
require less code.</p>

<p>Simply invoke your linker with the <code>-rpath</code> option pointing to various
subdirectories of the steam-runtime directory. For GCC and Clang, you
would add <code>-Wl,-rpath,&lt;path1&gt;:&lt;path2&gt;:...</code> to the linking step to
accomplish this.</p>

<p>These are the paths to the 64bit libraries in the steam-runtime:</p>

<ul>
<li>amd64/lib/x86_64-linux-gnu</li>
<li>amd64/lib</li>
<li>amd64/usr/lib/x86_64-linux-gnu</li>
<li>amd64/usr/lib</li>
</ul>


<p>These are the paths to the 32bit libraries:</p>

<ul>
<li>i386/lib/i386-linux-gnu</li>
<li>i386/lib</li>
<li>i386/usr/lib/i386-linux-gnu</li>
<li>i386/usr/lib</li>
</ul>


<p>Assuming you&rsquo;re using GCC and the steam-runtime lives next to the
executable, you&rsquo;d use these GCC options for a 64bit binary:</p>

<pre><code>-Wl,-z,origin -Wl,-rpath,$ORIGIN/steam-runtime/amd64/lib/x86_64-linux-gnu:$ORIGIN/steam-runtime/amd64/lib:$ORIGIN/steam-runtime/amd64/usr/lib/x86_64-linux-gnu:$ORIGIN/steam-runtime/amd64/usr/lib
</code></pre>

<p>And you would use these option for a 32bit binary:</p>

<pre><code>-Wl,-z,origin -Wl,-rpath,$ORIGIN/steam-runtime/i386/lib/i386-linux-gnu:$ORIGIN/steam-runtime/i386/lib:$ORIGIN/steam-runtime/i386/usr/lib/i386-linux-gnu:$ORIGIN/steam-runtime/i386/usr/lib
</code></pre>

<a name="Runtime.dependencies.of.the.steam-runtime"></a>
<h3>Runtime dependencies of the steam-runtime</h3>

<p>In addition to redirecting the ELF loader to the steam-runtime, there are some runtime dependencies within those dynamic libraries that need to be redirected as well. Luckily, Valve has done this work for us, and <a href="https://github.com/ValveSoftware/steam-runtime/tree/1a9c7173fc2092a7214eacdd0ffcbff3c5afe1e5/patches">patched these libraries to look elsewhere</a>. In order to know what the &ldquo;base&rdquo; of the runtime is, it looks at the <code>STEAM_RUNTIME</code> environment variable.</p>

<p>The first version of this post didn&rsquo;t include this detail, and you might&rsquo;ve run into errors like these:</p>

<pre><code>symbol lookup error: /usr/lib/x86_64-linux-gnu/gio/modules/libdconfsettings.so: undefined symbol: g_mapped_file_get_bytes
</code></pre>

<p>This is because glib has a <a href="https://github.com/ValveSoftware/steam-runtime/blob/1a9c7173fc2092a7214eacdd0ffcbff3c5afe1e5/patches/glib2.0/01_steam_runtime_path.patch#L16">runtime search for plugins</a> that directly calls <code>dlopen()</code> on an absolute path.</p>

<p>The solution to this problem is to have the first thing in your <code>main()</code> method on Linux be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">getenv</span><span class="p">(</span><span class="s">&quot;STEAM_RUNTIME&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">setenv</span><span class="p">(</span><span class="s">&quot;STEAM_RUNTIME&quot;</span><span class="p">,</span> <span class="n">figureOutSteamRuntimePath</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>A full sample for your <code>main()</code> is <a href="https://github.com/jorgenpt/steam-runtime-helpers/blob/master/sample_embedded_path_main.c">available in the helpers GitHub repository</a>.</p>

<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>With just a small modification to your build system and a ~100MB larger
distribution, you can make your executables run across a wide variety of
Linux distributions and user setups. I highly recommend the embedded
search path solution, which is what I used for <a href="http://www.uberent.com/pa/">Planetary
Annihilation</a>&rsquo;s Linux release.</p>

<p>When shipping your own steam-runtime, you are responsible for updating
the runtime. The date of the latest update can be found inside the
<a href="http://media.steampowered.com/client/runtime/steam-runtime-release_latest.tar.xz.md5">runtime MD5 file</a>. In addition, you are responsible for
respecting the licenses of all the packages included in the runtime &ndash;
including any clauses regarding redistribution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-contained game distribution on Linux]]></title>
    <link href="https://jorgen.tjer.no/post/2014/05/26/self-contained-game-distribution-on-linux/"/>
    <updated>2014-05-26T21:10:28-07:00</updated>
    <id>https://jorgen.tjer.no/post/2014/05/26/self-contained-game-distribution-on-linux</id>
    <content type="html"><![CDATA[<p>Distributing a game on Linux can be a little intimidating, and there are
definitely pitfalls. The main problem is making sure your game runs on
all of your users' machines, and outside of hardware and drivers, the
root of the problem is usually one of two things:</p>

<ol>
<li>You make an assumption about what libraries are present on the system.</li>
<li>You make an assumption about what version of a library is present on the system.</li>
</ol>


<p>This is very easy to accidentally do, as adding <code>-lSDL2</code> to the linker&rsquo;s
command line might work perfectly fine on your machine, but you forgot
that you installed SDL2 by hand 4 months ago. Another cause could be
that while <strong>your</strong> Linux distribution came with SDL2 preinstalled,
another distribution (that your users use) might not. Finally, maybe
your distribution came with v2 of some library, but your users only have
v1.</p>

<p>The best way to avoid this is to make your game distribution &ldquo;hermetic,&rdquo;
meaning that it contains all of its own dependencies. There are two main
ways to achieve this:</p>

<ol>
<li>Statically linking with all of your dependencies.</li>
<li>Dynamically linking with all of your dependencies, and pointing the
system&rsquo;s runtime loader at a copy of the libraries you bundle with
your game.</li>
</ol>


<p>Statically linking comes with its own set of problems, so this post
talks about solving the problem with dynamic linking.</p>

<a name="Introducing.the.steam-runtime"></a>
<h2>Introducing the steam-runtime</h2>

<p>It turns out that Valve has already solved this problem in Steam with
<a href="https://github.com/ValveSoftware/steam-runtime">something called the steam-runtime</a>. Contrary to what
its name indicates, it has <strong>no direct dependency on Steam nor does it
even assume that it is installed</strong>. It is merely a controlled set of
open source libraries (with some patches) and associated tools to use
those libraries - to make your game build hermetic.</p>

<!-- more -->


<p>If your game is running under Steam, you don&rsquo;t need to do much. Build
your game with the steam-runtime SDK, make sure all of your dependencies
exist inside of the runtime, and ship the game binaries to Steam. On the
receiving end, Steam will make sure that your users have the latest
version of the steam-runtime, and execute your game inside of it.</p>

<p>If you, like many others, also distribute your game outside of Steam,
you&rsquo;ll need to find another solution. The obvious solution is to build
on their work - it&rsquo;s an open source project that solves the problem
perfectly!</p>

<p>(<strong>Update:</strong> If you want to cut directly to the proposed solution, read
my <a href="https://jorgen.tjer.no/post/2014/05/28/steam-runtime-without-steam/">follow-up post on the details of using the steam-runtime without
depending on Steam</a>.)</p>

<a name="Workings.of.the.steam-runtime"></a>
<h2>Workings of the steam-runtime</h2>

<p>When I say that your game is executed &ldquo;inside&rdquo; of the runtime when
launched through Steam, I specifically mean that:</p>

<ul>
<li>The steam-runtime being present in some location Steam knows about</li>
<li>Steam sets the <code>LD_LIBRARY_PATH</code> environment variable before launching
your game to <a href="http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html#AEN80">instruct the dynamic loader to search the specified
directory for libraries</a>.</li>
</ul>


<p>This way, your game suddenly prefers the runtime versions of libraries
rather than your own. It&rsquo;s worth noting that if your game depends on a
library that is <strong>not</strong> present in the runtime, but the user has it
installed on their system, your game will run without error. This is
something to be wary of, since you don&rsquo;t know what version of the
library you&rsquo;re getting, and it&rsquo;ll fail to execute on some users'
systems.</p>

<p>The <a href="https://github.com/ValveSoftware/steam-runtime">runtime SDK</a> is just a set of tools that have been
told to look for libraries and headers inside the SDK rather than in the
system directories, so that the linker and compiler knows about the
right version of the libraries.</p>

<a name="Contents.of.the.runtime"></a>
<h2>Contents of the runtime</h2>

<p>Since the steam-runtime doesn&rsquo;t require Steam, let&rsquo;s take a look at what
the runtime contains, and see if there&rsquo;s a way to use this in our
non-Steam distributions.</p>

<p>You can find the runtime binaries hosted on the Steam CDN as a tar
archive:
<a href="http://media.steampowered.com/client/runtime/steam-runtime-release_latest.tar.xz">http://media.steampowered.com/client/runtime/steam-runtime-release_latest.tar.xz</a></p>

<p>I&rsquo;ve provided a script on GitHub that you can use to make sure you have
the latest runtime downloaded to the current directory. <a href="https://github.com/jorgenpt/steam-runtime-helpers/blob/master/update_runtime.sh">The helper
script is update_runtime.sh</a>.</p>

<p>The runtime tar archive contains some helper scripts, and the various
files needed for each library, as well as the libraries themselves. For
each library, there&rsquo;s a 32bit version (in the i386 directory) and a
64bit version (in the amd64 directory.)</p>

<p>Surprisingly enough, the runtime <em>also</em> contains (as of 2014-05-26) the
documentation needed for each library, which takes up almost half of the
space required by an extracted version of the runtime. To strip out the
documentation, and extract just the architecture you care about, I&rsquo;ve
written <a href="https://github.com/jorgenpt/steam-runtime-helpers/blob/master/extract_runtime.sh">another little helper script called
extract_runtime.sh</a>.</p>

<p>With this script, you&rsquo;ll be left with about ~100MB of libraries per
architecture. You can probably tailor the set of libraries for your
title to reduce the size even further, but that&rsquo;s left as an exercise
for the reader.</p>

<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>The Steam runtime is a useful collection of libraries that helps solve
the important problem of operating system fragmentation (different Linux
distributions, different versions). It has a lot of value outside of
Steam as well, and should be trivially re-usable for your non-Steam
distribution.</p>

<p><strong>Update</strong>: In the follow-up post, I cover <a href="https://jorgen.tjer.no/post/2014/05/28/steam-runtime-without-steam/">the details of distributing
a game that relies on the steam-runtime to hermetically seal its
environment, without depending on Steam</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DT_RPATH (ld) & @rpath (dyld)]]></title>
    <link href="https://jorgen.tjer.no/post/2014/05/20/dt-rpath-ld-and-at-rpath-dyld/"/>
    <updated>2014-05-20T22:06:29-07:00</updated>
    <id>https://jorgen.tjer.no/post/2014/05/20/dt-rpath-ld-and-at-rpath-dyld</id>
    <content type="html"><![CDATA[<p>Mac and Linux have two similarly named concepts that both deal with
dynamic loading, that behave quite differently: <code>@rpath</code> (under Mac OS
X&rsquo;s dyld) and <code>DT_RPATH</code> (or just rpath, under Linux' ld.)</p>

<p>Having done development (and more importantly, deployment) on both of
these platforms, I&rsquo;ve experienced first-hand how those concepts can get
a little jumbled in your mind, so here&rsquo;s a brief overview.</p>

<!-- more -->


<a name="DT_RPATH"></a>
<h2>DT_RPATH</h2>

<p>DT_RPATH, or more commonly just rpath, is a property set on an ELF
file<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. It points to a list of directories that the dynamic linker
will consider when loading a shared library. DT_RPATH is set at
link-time with the <code>-rpath</code> option to <code>ld</code>.  If you invoke <code>ld</code> through
<code>gcc</code> (or another compiler, like <code>g++</code>), then you can use the <code>-Wl</code>
option to pass arguments through to <code>ld</code>. You use commas to separate
arguments passed to <code>-Wl</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gcc program.c -lm -o program '-Wl,-rpath,$ORIGIN/lib'
</span><span class='line'>$ ldd program | grep libm
</span><span class='line'>        libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f3b9ad94000)
</span><span class='line'>$ mkdir lib && cp /lib/x86_64-linux-gnu/libm.so.6
</span><span class='line'>$ ldd program | grep libm
</span><span class='line'>        libm.so.6 =&gt; /home/jorgenpt/lib/libm.so.6 (0x00007f1440b0c000)</span></code></pre></td></tr></table></div></figure>


<p>The snippet above also shows one of the three special variables<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> you
can include in an rpath, $ORIGIN. $ORIGIN gets replaced at runtime with
the directory in which our executable lives. DT_RPATH is transitive,
meaning it applies to any dependencies of our dependencies (unlike
DT_RUNPATH, but I won&rsquo;t talk about that here.) If our executable links
with libfoo, and libfoo depends on libbar, libfoo will include our rpath
in its search for libbar. (<strong>EDIT 2014-05-25</strong>: You might need
<code>-Wl,-z,origin</code> for GCC to allow $ORIGIN to be expanded.)</p>

<p>$ORIGIN is also commonly expanded by bash or zsh, so we use single
quotes around our <code>-Wl,-rpath,$ORIGIN/lib</code> option to prevent that from
happening. To make sure that $ORIGIN didn&rsquo;t get expanded, you can run
<code>readelf -d my_executable | grep -i rpath</code> to see the value of your
rpath, making sure it starts with <code>$ORIGIN</code>.</p>

<p>To specify multiple paths, separate them by a colon, like
<code>-Wl,-rpath,$ORIGIN/lib:$ORIGIN/lib/amd64</code>.</p>

<p>As you might be able to tell, rpath is great for creating self-contained
applications. You still have to be careful, as any libraries that are
missing from your rpath will still be (silently) searched for in the
system directories. I highly recommend asking users for <code>ldd</code> output if
you&rsquo;re trying to debug something with your dependencies.</p>

<p>Many people use LD_LIBRARY_PATH to achieve a similar effect.
LD_LIBRARY_PATH is not set at link-time, but rather as an environment
variable when your application is run. This is for example what <a href="https://github.com/ValveSoftware/steam-runtime">Valve&rsquo;s
steam-runtime</a> does to guarantee that your dynamically
linked libraries will be picked from the Steam runtime libraries rather
than the system libraries.</p>

<p>The benefit of using LD_LIBRARY_PATH is that it can be set for
applications you cannot edit, but the downside is that it also applies
to any applications launched by the application in question. Say that
you have an application that launches <code>dbus-send</code> or <code>aplay</code> &ndash; since
they&rsquo;re system applications, you&rsquo;d want them to pick their dependencies
from the system, not your LD_LIBRARY_PATH.</p>

<p>Interaction between LD_LIBRARY_PATH and your application&rsquo;s rpath is
well-defined: Your rpath is searched first, and anything it can&rsquo;t find
there it&rsquo;ll look for in LD_LIBRARY_PATH. Finally, if searches the
system directories<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<a name="L.rpath"></a>
<h2>@rpath</h2>

<p>While @rpath is named similarly to its Linux cousin, it behaves a bit
differently. When you dynamically link to a library on Mac OS X, the
linker stores the &ldquo;install name&rdquo; of the library inside your executable.
The install name is something that comes from the dylib you&rsquo;re linking
against, and by default it is the absolute path of the linked file. You
can change the install name by modifying the dylib after linking<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>After your application has been linked, you can change what the
application thinks the install name is for one of its dependent
libraries<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>.</p>

<p>Your application can set its own rpath at link-time using the same
<code>-Wl,-rpath,@executable_path</code> magic, but note that instead of $ORIGIN,
you use @executable_path or @loader_path. @executable_path behaves
like $ORIGIN, @loader_path is the directory of whatever object is doing the
loading, which could be a dylib that your application has loaded. For
details, <a href="https://wincent.com/wiki/@executable_path,_@load_path_and_@rpath">read this excellent article by Wincent Colaiuta</a> and
<a href="https://www.mikeash.com/pyblog/friday-qa-2009-11-06-linking-and-install-names.html">this blog post by Mike Ash</a>.</p>

<p>This rpath does <em>not</em> do anything by default. To make it take effect,
the install name for the shared library has to start with <code>@rpath/</code> &ndash;
and the dynamic linker will then substitute each of the possible values
for <code>@rpath</code> in order. This means that you&rsquo;ll typically change the
install name of the dylib (if it&rsquo;s a dylib you built yourself) or change
the install name inside the application.</p>

<p>Under Mac OS X, you have the DYLD_LIBRARY_PATH environment variable &ndash;
and this behaves just like it does on Linux. When DYLD_LIBRARY_PATH is
set, it is checked before the install name (and therefore, @rpath) is
consulted.</p>

<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>Hopefully this helps you understand some nuances of dynamic linking on
Mac OS X versus Linux. In my next blog post, I hope to show how you can
use DT_RPATH on Linux to link with the Steam runtime when distributing
your game outside of Steam.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This also applies to .so&rsquo;s - when one of your dynamically loaded libraries load another dynamic library, their rpath is searched first (if any), then your main application&rsquo;s rpath is searched.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>The other two variables are <code>$LIB</code> and <code>$PLATFORM</code>, and they deal with finding architecture-specific binaries.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>The truth is a little more complicated, see the ld.so manpage for more info. (http://man7.org/linux/man-pages/man8/ld.so.8.html)<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>See the man page for install_name_tool (<code>install_name_tool -id @rpath/my.dylib my.dylib</code>)<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>See the man page for install_name_tool (<code>install_name_tool -change old.dylib @rpath/new.dylib my_application</code>)<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moved to a new location!]]></title>
    <link href="https://jorgen.tjer.no/post/2014/05/19/moving-to-a-new-blog/"/>
    <updated>2014-05-19T19:36:01-07:00</updated>
    <id>https://jorgen.tjer.no/post/2014/05/19/moving-to-a-new-blog</id>
    <content type="html"><![CDATA[<p>I have decided to retire my old <a href="http://jorgenpt.tumblr.com/">tumblr blog</a> in favor of this
new <a href="http://jorgen.tjer.no">octopress blog</a>. The reason for doing so is both that when it
comes to a blog, I&rsquo;d really like to own my own data, and that tumblr&rsquo;s
feature-set has bothered me in the past (with no way of improving it.)</p>

<p>With <a href="http://octopress.org">octopress</a> all my posts are simple markdown documents
managed <a href="https://github.com/jorgenpt/jorgenpt.github.io">in a git repository</a>, that gets transformed into
static content. That way, I both have the raw input for my blog, but
also static output, which I can host anywhere else if I decide that I
don&rsquo;t like GitHub any more.</p>

<!-- more -->


<p>In addition, octopress is open source (and uses <a href="https://github.com/jekyll/jekyll">jekyll</a>, an
excellent static site generator), so if I need / desire to change
anything, I can.</p>

<p>With this transition, my blog also needed a new domain. Peferably it
would be one I owned, so I can easily move the blog to another host if
it came to it, unlike what I could with my old tumblr blog.</p>

<p>I chose to use my tjer.no domain - and now the URL is jorgen.tjer.no!</p>

<p>Now I just need to actually keep posting to it on a semi-regular basis.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on Unreal Engine 4]]></title>
    <link href="https://jorgen.tjer.no/post/2014/03/19/thoughts-on-unreal-engine-4/"/>
    <updated>2014-03-19T14:04:00-07:00</updated>
    <id>https://jorgen.tjer.no/post/2014/03/19/thoughts-on-unreal-engine-4</id>
    <content type="html"><![CDATA[<p>I&rsquo;m excited by the <a href="https://unrealengine.com/blog/welcome-to-unreal-engine-4">release of Unreal Engine 4</a> (by Epic Games), and I figured I&rsquo;d put a couple of my thoughts down in writing.</p>

<p>First, let me emphasize something that hasn&rsquo;t been clear about this release: While UE4 uses a subscription model, a continued subscription is only required to get access to updates. Even if you cancel your subscription, you <strong>retain license to use &amp; modify the engine</strong>. Don&rsquo;t believe me? Read the <a href="https://www.unrealengine.com/eula">second to last paragraph of section 3 in their EULA</a>. You still have to (of course) follow the EULA and pay Epic 5% of your revenue from using UE4, even if you don&rsquo;t have an active subscription. On the topic of the EULA: It is written in fairly accessible english. Yay!</p>

<p>I&rsquo;ve seen people compare this release to Unity, and aside from differences in technology, one of the big things to note is that Unity keeps their source very close to their chest. If you&rsquo;re a Unity developer, and Unity Technologies goes away or the Unity engine has limitations that you care about but they don&rsquo;t, then you&rsquo;re hosed unless you go the route of getting a custom source license (which I&rsquo;d guess isn&rsquo;t cheap). You have no source access, so you cannot easily remove those limitations, and you cannot add support for new (or old) platforms. The same thing was true for the Unreal Development Kit (UDK), which was the &ldquo;non-AAA&rdquo; license option for UE3, but for UE4 it looks like you&rsquo;ll never be locked down like that.</p>

<p>Lastly, Epic is trying to encourage an open development process - both by them and by their licensees. That&rsquo;s pretty cool - I cringe when I think about how many different times the same things have likely been implemented / fixed in the Source engine, both by Valve&rsquo;s licensees, but also Valve developers. Epic realizes that their advantage is not (mainly) their specific implementation, but the sheer amount of engineering effort that has been put into making UE4 what it is. If licensees actually contribute back, then that will further UE4.</p>

<p><em>Disclaimer: I don&rsquo;t speak on behalf of Valve Software, and I have no association with Epic Games. I have not looked at the source of Unreal Engine 4 (yet).</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Droidcon UK 2012: Slides & recap]]></title>
    <link href="https://jorgen.tjer.no/post/2012/10/28/droidcon-uk-2012-slides-recap/"/>
    <updated>2012-10-28T09:09:00-07:00</updated>
    <id>https://jorgen.tjer.no/post/2012/10/28/droidcon-uk-2012-slides-recap</id>
    <content type="html"><![CDATA[<p>On Friday I spoke at <a href="http://uk.droidcon.com">Droidcon UK 2012</a>, and it was my very first conference talk, titled <a href="http://uk.droidcon.com/2012/sessions/the-butler-did-it-continuously-building-enforcing-app-quality-using-jenkins/">The Butler Did It: Continuously building &amp; enforcing app quality using Jenkins</a>.</p>

<p>I did the talk together with <a href="http://chris.orr.me.uk/+">Christopher Orr</a>, and the topic was using <a href="http://jenkins-ci.org/">Jenkins CI</a> and <a href="http://code.google.com/p/gerrit/">Gerrit</a> to improve app quality when building Android software. It also included a short rant about the Android NDK. I thought it went surprisingly well, especially considering I was fueled by only 5 hours of sleep!</p>

<p>The turn-out was great - every seat was occupied, and we got a lot of interest in the form of questions afterwards. Here you can find the source material for our talk - our slides are pretty light on text, so we also have a version with a more fleshed out version of our speaker notes.</p>

<p>I&rsquo;ve been told by the Droidcon organizers that they&rsquo;ll publish the video from the talk. I&rsquo;ll post an update once that&rsquo;s available.</p>

<p>In addition, the demo doesn&rsquo;t have any audio or captioning so far, but hopefully we&rsquo;ll update soon with a narrated or captioned video.</p>

<ul>
<li><a href="https://dl.dropbox.com/u/987046/Presentations/droidcon_slides_with_notes.pdf">Slides with notes (PDF)</a></li>
<li><a href="https://dl.dropbox.com/u/987046/Presentations/droidcon_slides.pdf">Slides without notes (PDF)</a></li>
<li><a href="http://youtu.be/E3ZHBD1Med8">Jenkins &amp; Android demo (YouTube)</a></li>
</ul>


<p>If you&rsquo;d like to contact me or Chris, the contact information is on the last slide.</p>

<p><strong>EDIT April 2014</strong>: I finally found the video of the talk, it requires a (free) sign-up, and is <a href="https://skillsmatter.com/skillscasts/3729-the-butler-did-it-continuously-building-enforcing-app-quality-using-jenkins">available on SkillsMatter.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arcane DM Dev Diary #1]]></title>
    <link href="https://jorgen.tjer.no/post/2012/10/06/arcane-dm-dev-diary-001/"/>
    <updated>2012-10-06T15:41:16-07:00</updated>
    <id>https://jorgen.tjer.no/post/2012/10/06/arcane-dm-dev-diary-001</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s the first &ldquo;dev diary&rdquo; video for Arcane Deathmatch.</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/cYxfSR7fj2Q" allowfullscreen></iframe></div>


<p>So far the game has:</p>

<ul>
<li>Working networking</li>
<li>Simple network lobby</li>
<li>Basic UI - leaderboard, spell shop</li>
<li>Three initial spells (magic missile, infernal nova, teleport)</li>
<li>A very boring level</li>
<li>A reward system for kills</li>
<li>A round system with a &ldquo;last man standing&rdquo; victory condition</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First playtest of Arcane Deathmatch]]></title>
    <link href="https://jorgen.tjer.no/post/2012/10/06/first-playtest-of-arcane-deathmatch/"/>
    <updated>2012-10-06T15:24:00-07:00</updated>
    <id>https://jorgen.tjer.no/post/2012/10/06/first-playtest-of-arcane-deathmatch</id>
    <content type="html"><![CDATA[<p>Yesterday I asked two coworkers to play Arcane Deathmatch with me, to get an initial feel for what direction I&rsquo;m going in. It was a great experience, and a great motivator: I finished up a large amount of basic implementations of features in the last week, so that it&rsquo;d be ready for the playtest.</p>

<p>I <strong>highly</strong> recommend doing this early for people working on hobby projects - it helps you focus on shipping and creating a real product, and motivate you. During the time leading up to the play-testing, I started thinking of every issue I&rsquo;ve filed in the bugtracker in terms of &ldquo;how important is this to testing gameplay&rdquo;.</p>

<p>Some very useful things I learned include:</p>

<ul>
<li>Controls need to be thought about very carefully, and tested on real people. What seems fine when you&rsquo;re just testing around the environment is experienced completely differently when you&rsquo;re in an action-packed fight.</li>
<li>While art is not important to the &ldquo;fun&rdquo; in this concept, UX is very important - even early on. People need to find the information and actions they care about!</li>
<li>Pacing is very important, and hard to get right - there are a <em>lot</em> of factors that influence it, many of which I haven&rsquo;t gotten around to implementing yet.</li>
</ul>


<p>There were a lot of other subtle bugs and improvements I found through this little hour of gameplay. As an example, camera movement is currently not animated, which makes Teleport <strong>very</strong> jarring.</p>

<p>For now, I&rsquo;m back to implementing some new content (especially a more interesting level and more spells) - and then I can get a better feel for how pacing and balancing needs to be done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arcane DM: First progress update]]></title>
    <link href="https://jorgen.tjer.no/post/2012/10/01/arcane-dm-first-progress-update/"/>
    <updated>2012-10-01T23:58:00-07:00</updated>
    <id>https://jorgen.tjer.no/post/2012/10/01/arcane-dm-first-progress-update</id>
    <content type="html"><![CDATA[<p>While work is keeping me busy, over the past few weeks I&rsquo;ve had a couple of good evenings to work on Arcane Deathmatch.</p>

<p>Last weekend I poked around with a second spell, &ldquo;Infernal Nova&rdquo;:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/e_HNPJ92-H0" allowfullscreen></iframe></div>


<p>This Saturday I added a leader board, a gold reward when you kill someone, and fixed some bugs. Tonight I added a UI for shopping spells, made the leader board prettier, and added a Teleport spell. Woo! Check it out below:</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/YFKmtO05VjU" allowfullscreen></iframe></div>


<p>Hopefully I&rsquo;ll keep making steady progress and I can start very very early tests against real people this week or next.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing Arcane Deathmatch]]></title>
    <link href="https://jorgen.tjer.no/post/2012/09/09/announcing-arcane-deathmatch/"/>
    <updated>2012-09-09T15:10:00-07:00</updated>
    <id>https://jorgen.tjer.no/post/2012/09/09/announcing-arcane-deathmatch</id>
    <content type="html"><![CDATA[<p>The last few months it&rsquo;s been busy with three weddings (including my own) and a vacation. Every once in a while I&rsquo;ve been tinkering with a game prototype with a smaller scope than Dungeon Fodder - and now I&rsquo;ve finally reached a point where I can say that I&rsquo;ll be pursuing this concept instead of Dungeon Fodder. I first had to make sure Unity&rsquo;s (fairly lacking) networking APIs would be suitable for developing this.</p>

<p>The game is tentatively named &ldquo;Arcane Deathmatch&rdquo;, and it&rsquo;s a third person / top down, fast paced, RPG-inspired multiplayer action game. The gameplay is similar to the Warcraft 3 custom map &ldquo;Warlocks&rdquo; (I think?): You control a wizard/warlock on a relatively small battlefield. You&rsquo;re pitted against a few adversaries, all of you armed with whatever spells you&rsquo;ve purchased. As you survive and kill off your opponents you&rsquo;re awarded gold with which to purchase new spells between rounds.</p>

<p>Every time you&rsquo;re hit by a spell, you lose some health and get knocked back. The less health you have, the easier you are to knock around. If you get knocked off the map, you&rsquo;ll probably sustain damage wading through a lava pit, be nibbled on by piranhas as you swim to shore, or fall off the map.</p>

<p><img class="center" src="https://jorgen.tjer.no/images/early_adm.png"></p>

<p>So far, I&rsquo;ve got rudimentary networking and gameplay working - two or more players can connect to eachother and fight it out (armed with Magic Missile!), and getting knocked off the map means falling to your death. It doesn&rsquo;t look like much - but that&rsquo;s never stopped me before! ;-)</p>

<p>Vital things that are missing are more spells, rewards, a way to buy said spells, more interesting maps / terrain / obstacles, and a scoreboard. (Probably in that order)</p>

<p>I hope you&rsquo;ll follow my blog as I post status updates and my experiences developing this game :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lack of updates for a few weeks]]></title>
    <link href="https://jorgen.tjer.no/post/2012/06/18/lack-of-updates-for-a-few-weeks/"/>
    <updated>2012-06-18T12:41:38-07:00</updated>
    <id>https://jorgen.tjer.no/post/2012/06/18/lack-of-updates-for-a-few-weeks</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve attracted some people who are following the progress of this project, so I figured I should give a quick update on my (lack of) progress.</p>

<p>I&rsquo;m in the middle of organizing a wedding reception, so there won&rsquo;t be any time for working on my projects until after the 26th of June. I look forward to getting back to it!</p>

<p>So far, updates have been on a weekly schedule. I intend to continue with that pace - or maybe biweekly, depending on how much time I have. Right before this lack of updates began, I started prototyping a game based on some of the same concepts, but with a smaller scope. I might pursue that so that I have a playable, &ldquo;done&rdquo; game at an earlier point. If so, it&rsquo;ll be featured in an upcoming post. :)</p>

<p>Thank you all for your feedback and interest! This is exactly why I publish this publicly!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Requiring a minimum version of the Android SDK]]></title>
    <link href="https://jorgen.tjer.no/post/2012/06/05/requiring-a-minimum-version-of-the-android-sdk/"/>
    <updated>2012-06-05T16:40:00-07:00</updated>
    <id>https://jorgen.tjer.no/post/2012/06/05/requiring-a-minimum-version-of-the-android-sdk</id>
    <content type="html"><![CDATA[<p>(This is similar to <a href="https://jorgen.tjer.no/post/2012/03/02/requiring-a-minimum-version-of-the-android-ndk/">Requiring a minimum version of the Android NDK</a>, but for SDK versions)</p>

<p>Again, I was tinkering with our build system at work, which is a set of small Makefiles that are responsible for invoking ndk-build (to build our C component) and ant (for the Java component). These files also maintain the dependency graph for the cross-domain dependencies, so things like header files being generated from class-files using <code>javah</code> and APKs depending on the produced shared libraries.</p>

<p>I recently made some changes to the <code>ant</code> build step by creating <a href="https://gist.github.com/2878806">our own <code>custom_rules.xml</code></a>, exposing the &ldquo;hidden&rdquo; -compile target. What I noticed was that <code>build.xml</code> only did an <code>&lt;import file="custom_rules.xml" optional="true" /&gt;</code> if you were on a fairly recent Android SDK version. This isn&rsquo;t a problem for our Jenkins builds, since we&rsquo;ve got an in-house system that ensures a strict version dependency between a specific source checkout and SDK/NDK versions, so they were always using the newer SDK. It was a problem for our developers - we&rsquo;ve yet to roll this system to our development machines, so developers are responsible for checking out and updating their own SDKs.</p>

<p>To prevent this from getting in the way, I wrote a little snippet of bash that&rsquo;s run from the Makefile, that ensures that the SDK version is at least the given version.</p>

<p>You can find <a href="https://gist.github.com/2878774">the shellscript as a gist on GitHub</a></p>

<p>Put the script into <code>assert_sdk_version.sh</code>, and put the following at the top of your <code>Makefile</code>, and voilà! Builds should now fail with a more understandable message if someone&rsquo;s using the wrong NDK version. :-)</p>

<figure class='code'><figcaption><span>Makefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='make'><span class='line'><span class="cp">ifneq ($(shell $(LOCAL_PATH)/assert_sdk_version.sh &quot;r19&quot;),true)</span>
</span><span class='line'>  <span class="k">$(</span>error SDK version r19 or greater required<span class="k">)</span>
</span><span class='line'><span class="cp">endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re curious how this works: It checks the <code>tools/source.properties</code> file in your Android SDK, looking for a line like <code>Pkg.Revision=XX</code>, and extracts the version (<code>XX</code>) from that.</p>

<p>It&rsquo;s pretty straight forward, but I couldn&rsquo;t find anything online on how to check the SDK version from the command line, so I figured I&rsquo;d share it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dungeon Fodder Update #7]]></title>
    <link href="https://jorgen.tjer.no/post/2012/05/28/dev-diary-007/"/>
    <updated>2012-05-28T16:59:00-07:00</updated>
    <id>https://jorgen.tjer.no/post/2012/05/28/dev-diary-007</id>
    <content type="html"><![CDATA[<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/yX0M2LjnyOc" allowfullscreen></iframe></div>


<p>A little busy the past two weeks (Diablo 3 and a lot to do at work), but here&rsquo;s what I had time to do:</p>

<ul>
<li>Reworked minimap</li>
<li>Inventory management</li>
<li>New spell, &ldquo;Barrier&rdquo;</li>
<li>Non-active player switched to <a href="http://angryant.com/behave">Behave</a>-based AI - he now shoots at enemies!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inventory management]]></title>
    <link href="https://jorgen.tjer.no/post/2012/05/26/inventory-management/"/>
    <updated>2012-05-26T14:39:00-07:00</updated>
    <id>https://jorgen.tjer.no/post/2012/05/26/inventory-management</id>
    <content type="html"><![CDATA[<p>I added some rudimentary (but functional) inventory management:</p>

<p><img class="center" src="http://i.imgur.com/7nQjQ.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minimap cleanup]]></title>
    <link href="https://jorgen.tjer.no/post/2012/05/19/minimap-cleanup/"/>
    <updated>2012-05-19T13:58:00-07:00</updated>
    <id>https://jorgen.tjer.no/post/2012/05/19/minimap-cleanup</id>
    <content type="html"><![CDATA[<p>Didn&rsquo;t get too much done this week, but I cleaned up the minimap:</p>

<p>Minimap before:<br/>
<img src="http://i.imgur.com/0z7oB.png" title="&#34;Minimap before&#34;" alt="&#34;Minimap before&#34;"></p>

<p>Minimap after:<br/>
<img src="http://i.imgur.com/9wMdz.png" title="&#34;Minimap after&#34;" alt="&#34;Minimap after&#34;"></p>

<p>I also added a dungeon level indicator:<br/>
<img src="http://i.imgur.com/dXnTI.png" title="&#34;Dungeon level indicator&#34;" alt="&#34;Dungeon level indicator&#34;"></p>

<p>And finally I switched the non-player character to use the same AI engine as the zombies (<a href="http://angryant.com/behave">AngryAnt&rsquo;s Behave</a>), though with a different behavior tree. So far this just means that the non-player character actually attacks enemies. Woo!</p>

<p>Hopefully I&rsquo;ll have time to make the inventory management more complete and do a dev diary this weekend. We&rsquo;ll see.</p>
]]></content>
  </entry>
  
</feed>
