<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mac OS X | Jørgen's Blog]]></title>
  <link href="http://jorgenpt.github.io/blog/categories/mac-os-x/atom.xml" rel="self"/>
  <link href="http://jorgenpt.github.io/"/>
  <updated>2014-05-24T11:25:35-07:00</updated>
  <id>http://jorgenpt.github.io/</id>
  <author>
    <name><![CDATA[Jørgen Tjernø]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[DT_RPATH (ld) & @rpath (dyld)]]></title>
    <link href="http://jorgenpt.github.io/post/2014/05/20/dt-rpath-ld-and-at-rpath-dyld/"/>
    <updated>2014-05-20T22:06:29-07:00</updated>
    <id>http://jorgenpt.github.io/post/2014/05/20/dt-rpath-ld-and-at-rpath-dyld</id>
    <content type="html"><![CDATA[<p>Mac and Linux have two similarly named concepts that both deal with
dynamic loading, that behave quite differently: <code>@rpath</code> (under Mac OS
X&rsquo;s dyld) and <code>DT_RPATH</code> (or just rpath, under Linux' ld.)</p>

<p>Having done development (and more importantly, deployment) on both of
these platforms, I&rsquo;ve experienced first-hand how those concepts can get
a little jumbled in your mind, so here&rsquo;s a brief overview.</p>

<!-- more -->


<h2>DT_RPATH</h2>

<p>DT_RPATH, or more commonly just rpath, is a property set on an ELF
file<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. It points to a list of directories that the dynamic linker
will consider when loading a shared library. DT_RPATH is set at
link-time with the <code>-rpath</code> option to <code>ld</code>.  If you invoke <code>ld</code> through
<code>gcc</code> (or another compiler, like <code>g++</code>), then you can use the <code>-Wl</code>
option to pass arguments through to <code>ld</code>. You use commas to separate
arguments passed to <code>-Wl</code>.</p>

<p>```
$ gcc program.c -lm -o program &lsquo;-Wl,-rpath,$ORIGIN/lib&rsquo;
$ ldd program | grep libm</p>

<pre><code>    libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f3b9ad94000)
</code></pre>

<p>$ mkdir lib &amp;&amp; cp /lib/x86_64-linux-gnu/libm.so.6
$ ldd program | grep libm</p>

<pre><code>    libm.so.6 =&gt; /home/jorgenpt/lib/libm.so.6 (0x00007f1440b0c000)
</code></pre>

<p>```</p>

<p>The snippet above also shows one of the three special variables<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> you
can include in an rpath, $ORIGIN. $ORIGIN gets replaced at runtime with
the directory in which our executable lives. DT_RPATH is transitive,
meaning it applies to any dependencies of our dependencies (unlike
DT_RUNPATH, but I won&rsquo;t talk about that here.) If our executable links
with libfoo, and libfoo depends on libbar, libfoo will include our rpath
in its search for libbar.</p>

<p>$ORIGIN is also commonly expanded by bash or zsh, so we use single
quotes around our <code>-Wl,-rpath,$ORIGIN/lib</code> option to prevent that from
happening.</p>

<p>To specify multiple paths, separate them by a colon, like
<code>-Wl,-rpath,$ORIGIN/lib:$ORIGIN/lib/amd64</code>.</p>

<p>As you might be able to tell, rpath is great for creating self-contained
applications. You still have to be careful, as any libraries that are
missing from your rpath will still be (silently) searched for in the
system directories. I highly recommend asking users for <code>ldd</code> output if
you&rsquo;re trying to debug something with your dependencies.</p>

<p>Many people use LD_LIBRARY_PATH to achieve a similar effect.
LD_LIBRARY_PATH is not set at link-time, but rather as an environment
variable when your application is run. This is for example what <a href="https://github.com/ValveSoftware/steam-runtime">Valve&rsquo;s
steam-runtime</a> does to guarantee that your dynamically
linked libraries will be picked from the Steam runtime libraries rather
than the system libraries.</p>

<p>The benefit of using LD_LIBRARY_PATH is that it can be set for
applications you cannot edit, but the downside is that it also applies
to any applications launched by the application in question. Say that
you have an application that launches <code>dbus-send</code> or <code>aplay</code> &mdash; since
they&rsquo;re system applications, you&rsquo;d want them to pick their dependencies
from the system, not your LD_LIBRARY_PATH.</p>

<p>Interaction between LD_LIBRARY_PATH and your application&rsquo;s rpath is
well-defined: Your rpath is searched first, and anything it can&rsquo;t find
there it&rsquo;ll look for in LD_LIBRARY_PATH. Finally, if searches the
system directories<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<h2>@rpath</h2>

<p>While @rpath is named similarly to its Linux cousin, it behaves a bit
differently. When you dynamically link to a library on Mac OS X, the
linker stores the &ldquo;install name&rdquo; of the library inside your executable.
The install name is something that comes from the dylib you&rsquo;re linking
against, and by default it is the absolute path of the linked file. You
can change the install name by modifying the dylib after linking<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>After your application has been linked, you can change what the
application thinks the install name is for one of its dependent
libraries<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>.</p>

<p>Your application can set its own rpath at link-time using the same
<code>-Wl,-rpath,@executable_path</code> magic, but note that instead of $ORIGIN,
you use @executable_path or @loader_path. @executable_path behaves
like $ORIGIN, @loader_path is the directory of whatever object is doing the
loading, which could be a dylib that your application has loaded. For
details, <a href="https://wincent.com/wiki/@executable_path,_@load_path_and_@rpath">read this excellent article by Wincent Colaiuta</a> and
<a href="https://www.mikeash.com/pyblog/friday-qa-2009-11-06-linking-and-install-names.html">this blog post by Mike Ash</a>.</p>

<p>This rpath does <em>not</em> do anything by default. To make it take effect,
the install name for the shared library has to start with <code>@rpath/</code> &mdash;
and the dynamic linker will then substitute each of the possible values
for <code>@rpath</code> in order. This means that you&rsquo;ll typically change the
install name of the dylib (if it&rsquo;s a dylib you built yourself) or change
the install name inside the application.</p>

<p>Under Mac OS X, you have the DYLD_LIBRARY_PATH environment variable &mdash;
and this behaves just like it does on Linux. When DYLD_LIBRARY_PATH is
set, it is checked before the install name (and therefore, @rpath) is
consulted.</p>

<h2>Summary</h2>

<p>Hopefully this helps you understand some nuances of dynamic linking on
Mac OS X versus Linux. In my next blog post, I hope to show how you can
use DT_RPATH on Linux to link with the Steam runtime when distributing
your game outside of Steam.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This also applies to .so&rsquo;s &ndash; when one of your dynamically loaded libraries load another dynamic library, their rpath is searched first (if any), then your main application&rsquo;s rpath is searched.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>The other two variables are <code>$LIB</code> and <code>$PLATFORM</code>, and they deal with finding architecture-specific binaries.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>The truth is a little more complicated, see the ld.so manpage for more info. (http://man7.org/linux/man-pages/man8/ld.so.8.html)<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>See the man page for install_name_tool (<code>install_name_tool -id @rpath/my.dylib my.dylib</code>)<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>See the man page for install_name_tool (<code>install_name_tool -change old.dylib @rpath/new.dylib my_application</code>)<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Livecasting your desktop in OS X]]></title>
    <link href="http://jorgenpt.github.io/post/2012/04/21/livecasting-osx-desktop/"/>
    <updated>2012-04-21T00:04:00-07:00</updated>
    <id>http://jorgenpt.github.io/post/2012/04/21/livecasting-osx-desktop</id>
    <content type="html"><![CDATA[<p><strong>EDIT</strong>: Found a way to get audio using Soundflower &amp; sox.<br/>
<strong>EDIT 2</strong>: RTP+SDP was somehow garbling the output, new and improved script now uses FIFOs!</p>

<p>Turns out that livecasting your desktop in OS X is surprisingly hard. I found two ways online, none of which satisfied me, so I hunted for my own.</p>

<h3>Adobe Flash Media Live Encoder, CamTwist &amp; Soundflower</h3>

<p>This method, <a href="http://www.mikechambers.com/blog/2011/05/29/setting-up-desktop-streaming-on-mac-os-x/">described by Mike Chambers</a>, relied on three separate GUI tools (one of which was required the Adobe Flash Media Live Encoder), consumed all my CPU, and refused to support my 16:10 aspect ratio. Yikes.</p>

<h3>Ustream Producer</h3>

<p><a href="http://www.ustream.tv/producer">One simple app</a> to do everything, but sadly it only supports streaming to Ucast, downscales to somewhere near the resolution of a feature-phone from 2000, and still constantly complains that I don&rsquo;t have enough bandwidth. You can get the &ldquo;Pro&rdquo; version for $200 which gives you &ldquo;HD Broadcasting&rdquo; &ndash; but no thanks.</p>

<h3>My own</h3>

<p>So, based on <a href="http://unethicalblogger.com/2012/04/04/live-coding-with-ffmpeg.html">Tyler&rsquo;s Linux approach</a>, I tried getting something similar working on OS X. It only used ffmpeg, and seemed to work pretty well.</p>

<p>Surprisingly, my researched ended up with the following results:
 1. <code>ffmpeg</code> doesn&rsquo;t support screen grabbing on OS X
 1. <code>ffmpeg</code> doesn&rsquo;t have a single audio input that can read an audio device on OS X (see OpenAL section below)
 1. <code>ffmpeg</code> can&rsquo;t record a web cam on OS X (this would allow me to use CamTwist as an input source)
 1. VLC doesn&rsquo;t support streaming to an RTMP server
 1. VLC can&rsquo;t record from an audio device
 1. The only other app that&rsquo;d stream audio live from an audio device to a fifo or pipe was <code>sox</code>.</p>

<p>Any of these statements might be wrong, so please tell me if you know a way :)</p>

<p>So, the best I could do was have <a href="http://www.videolan.org/">VLC</a> stream the screen over a FIFO to <code>ffmpeg</code>, redirect audio through <a href="http://code.google.com/p/soundflower/">Soundflower</a>, then use <code>sox</code> to pipe audio to <code>ffmpeg</code>.
Finally, <code>ffmpeg</code> recodes all that data and sends it to the justin.tv RTMP server. Not very simple, but at least it works.</p>

<p>Turns out that this works best if you do <em>no</em> work in VLC other than spew to a FIFO: no encoding or encapsulating. Even using MPEG-TS had issues in this context. Raw video in a dummy mux is passed over the FIFO to <code>ffmpeg</code>, and <code>ffmpeg</code> is allowed to do all the encoding.</p>

<p>In any case, I figured I should share this with the rest of you.</p>

<p>Here&rsquo;s a modified version of <a href="http://unethicalblogger.com/2012/04/04/live-coding-with-ffmpeg.html">Tyler&rsquo;s script</a>:</p>

<p><div><script src='https://gist.github.com/2435006.js?file=stream.sh'></script>
<noscript><pre><code>#!/bin/sh -xe

API_KEY=&quot;YOUR_API_KEY_GOES_HERE&quot;
FPS=&quot;10&quot;
VLC_PATH=&quot;/Applications/VLC.app/Contents/MacOS/VLC&quot;
# I don&#39;t know how this&#39;ll behave on multimon, so you might want to hard-code.
# INRES=&#39;1440x900&#39;
INRES=$(osascript -e &#39;tell application &quot;Finder&quot; to get bounds of window of desktop&#39;|sed &#39;s/, /x/g&#39;|cut -f3- -dx)
OUTRES=&#39;1280x800&#39;
# You can change this to record microphone or something else, from man soxformat (under coreaudio):
# The valid names can be seen in the System Preferences-&gt;Sound menu and then under the Output and Input tabs.
COREAUDIO_DEVICE=&quot;Soundflower (2ch)&quot;

VIDEO_FIFO=/tmp/vlc-ffmpeg.raw
AUDIO_FIFO=/tmp/sox-ffmpeg.wav

for fifo in &quot;$VIDEO_FIFO&quot; &quot;$AUDIO_FIFO&quot;; do
  rm -f &quot;$fifo&quot;
  mkfifo &quot;$fifo&quot;
done

# This is called when you ^C or an app quits. It kills all the processes and deletes the FIFOs.
function cleanup() {
  trap &quot;&quot; EXIT INT

  [[ ! -z &quot;$vlc_pid&quot; ]] &amp;&amp; kill -9 &quot;$vlc_pid&quot;
  [[ ! -z &quot;$sox_pid&quot; ]] &amp;&amp; kill -9 &quot;$sox_pid&quot;
  [[ ! -z &quot;$ffmpeg_pid&quot; ]] &amp;&amp; kill -9 &quot;$ffmpeg_pid&quot;
  rm -f &quot;$VIDEO_FIFO&quot;
  rm -f &quot;$AUDIO_FIFO&quot;
}

trap &quot;cleanup&quot; EXIT INT

# VLC streams screen:// to $VIDEO_FIFO, in a raw BGRA format.
$VLC_PATH screen:// :screen-fps=&quot;$FPS&quot; -I dummy --sout &quot;file/dummy:$VIDEO_FIFO&quot; &amp;
vlc_pid=$!

# SOX streams $COREAUDIO_DEVICE to $AUDIO_FIFO (with an increased buffer size, 4MB)
sox --buffer 4194304 -q -c 2 -t coreaudio &quot;$COREAUDIO_DEVICE&quot; -t wav &quot;$AUDIO_FIFO&quot; &amp;
sox_pid=$!

# ffmpeg reads raw video from $VIDEO_FIFO, recodes it using libx264, combines it with mp3 that&#39;s been
# transcoded from $AUDIO_FIFO with LAME, and ships it as FLV to justin.tv&#39;s RTMP server.
ffmpeg -threads 0 \
  -f rawvideo -pix_fmt bgra -s &quot;$INRES&quot; -r &quot;$FPS&quot; -i &quot;$VIDEO_FIFO&quot; \
  -f wav -i &quot;$AUDIO_FIFO&quot; \
  -vcodec libx264 -s &quot;$OUTRES&quot; \
  -acodec libmp3lame -ab 128k -ar 44100 \
  -f flv &quot;rtmp://live.justin.tv/app/$API_KEY&quot; &amp;
ffmpeg_pid=$!

wait $ffmpeg_pid $sox_pid $vlc_pid</code></pre></noscript></div>
</p>

<h4>OpenAL issues</h4>

<p><code>ffmpeg</code> can theoretically record input devices on OS X using OpenAL &ndash; which ships with OS X by default. I spent some time trying to get homebrew to build it (<a href="https://github.com/jorgenpt/homebrew/commit/d69e9d22ef2b0d04fc4f429e91918c034e19a068">patch here</a>), but when I finally got it building I realized <a href="http://ffmpeg.org/trac/ffmpeg/ticket/314">it was completely broken</a>. Yay!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The secret to the home-relative Sandbox entitlement]]></title>
    <link href="http://jorgenpt.github.io/post/2011/07/26/home-relative-sandbox-entitlement/"/>
    <updated>2011-07-26T16:45:55-07:00</updated>
    <id>http://jorgenpt.github.io/post/2011/07/26/home-relative-sandbox-entitlement</id>
    <content type="html"><![CDATA[<p>With the launch of Lion, Apple added a new security feature to the operating system: The Application Sandbox. It encourages application authors to specify what subset of system functionality their app needs to function correctly, in order to reduce the impact of a malicious or compromised app. See the [Mac OS X Developer Library][dev-library-sandbox] or the [ars technica Lion review][ars-lion-review] for more info on this.</p>

<p>As a part of this, Apple added a set of entitlements labeled &ldquo;temporary exceptions&rdquo; (<a href="http://developer.apple.com/library/mac/#documentation/Security/Conceptual/CodeSigningGuide/ApplicationSandboxingEntitlementKeys/ApplicationSandboxingEntitlementKeys.html">here&rsquo;s a complete list</a>), most likely to simplify and speed up adoption of this new technology. Your app can claim to need one of these &ldquo;temporary&rdquo; entitlements to do certain things that otherwise wouldn&rsquo;t be allowed by the Sandbox. For <a href="http://grabbox.devsoft.no">GrabBox</a> I need to have read-only access the users desktop &mdash; which falls under this category.</p>

<p>I&rsquo;ve been spending some time today trying to figure out how to get the <code>com.apple.security.temporary-exception.files.home-relative-path.read-only</code> entitlement working. The documentation is sparse, and there&rsquo;re no samples as far as I can tell. After many attempts, I finally figured out the key piece of information keeping me from getting this working: The path you specify in the entitlement needs to <strong>start with a slash</strong>. For example, instead of specifying <code>Desktop</code>, you specify <code>/Desktop</code>.</p>

<p>Here&rsquo;s an example of a valid entitlement plist:</p>

<p>```xml Info.plist</p>

<p><pre>&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;!DOCTYPE plist PUBLIC &ldquo;&ndash;//Apple//DTD PLIST 1.0//EN&rdquo; &ldquo;<a href="http://www.apple.com/DTDs/PropertyList-1.0.dtd">http://www.apple.com/DTDs/PropertyList-1.0.dtd</a>&rdquo;>
<plist version="1.0">
<dict></p>

<pre><code>    &lt;key&gt;com.apple.security.app-sandbox&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;com.apple.security.temporary-exception.files.home-relative-path.read-only&lt;/key&gt;
    &lt;array&gt;
            &lt;string&gt;/Desktop&lt;/string&gt;
            &lt;string&gt;/Dropbox&lt;/string&gt;
    &lt;/array&gt;
</code></pre>

<p></dict>
</plist>
```</p>

<p>I assume this applies to the <code>com.apple.security.temporary-exception.files.home-relative-path.read-write</code> entitlement as well.</p>

<p>I hope this saves other people trying to get this working a little bit of time. :&ndash;)</p>

<p>[dev-library-sandbox]: <a href="http://developer.apple.com/library/mac/documentation/General/Conceptual/MOSXAppProgrammingGuide/AppRuntime/AppRuntime.html#//apple_ref/doc/uid/TP40010543-CH2-SW7">http://developer.apple.com/library/mac/documentation/General/Conceptual/MOSXAppProgrammingGuide/AppRuntime/AppRuntime.html#//apple_ref/doc/uid/TP40010543-CH2-SW7</a>
[ars-lion-review]: <a href="http://arstechnica.com/apple/2011/07/mac-os-x-10-7.ars/9#sandboxing">http://arstechnica.com/apple/2011/07/mac-os-x-10-7.ars/9#sandboxing</a></p>
]]></content>
  </entry>
  
</feed>
