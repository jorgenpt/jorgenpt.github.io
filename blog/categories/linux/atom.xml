<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Jørgen's Blog]]></title>
  <link href="https://jorgen.tjer.no/blog/categories/linux/atom.xml" rel="self"/>
  <link href="https://jorgen.tjer.no/"/>
  <updated>2023-03-04T12:33:32-08:00</updated>
  <id>https://jorgen.tjer.no/</id>
  <author>
    <name><![CDATA[Jørgen Tjernø]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[steam-runtime without Steam]]></title>
    <link href="https://jorgen.tjer.no/post/2014/05/28/steam-runtime-without-steam/"/>
    <updated>2014-05-28T08:28:28-07:00</updated>
    <id>https://jorgen.tjer.no/post/2014/05/28/steam-runtime-without-steam</id>
    <content type="html"><![CDATA[<p><strong>Updated 2014-06-03:</strong> Added information about <code>STEAM_RUNTIME</code> variable under <a href="/post/2014/05/28/steam-runtime-without-steam/#Runtime.dependencies.of.the.steam-runtime">the new embedded search path subsection</a>.</p>

<p><strong>Updated 2016-01-03:</strong> Fixed dead links to Valve&rsquo;s steam-runtime patches collection.</p>

<p>If you&rsquo;ve ever had customers report errors like these, then this post
might be for you:</p>

<ul>
<li><code>./foo: /usr/lib/x86_64-linux-gnu/libstdc++.so.6: version
`GLIBCXX_3.4.16` not found (required by ./foo)</code></li>
<li><code>./foo: error while loading shared libraries: libSDL2-2.0.so.0:
 cannot open shared object file: No such file or directory</code></li>
</ul>


<p>In my <a href="/post/2014/05/26/self-contained-game-distribution-on-linux/">previous post about self-contained distributions</a>,
we started looking at how the <a href="https://github.com/ValveSoftware/steam-runtime">steam-runtime project</a>
works. In this post, we&rsquo;ll make the steam-runtime work for us in a
self-contained distribution that you can ship without depending on
Steam.</p>

<p>I will present two possible ways of doing it:</p>

<ol>
<li>Using <a href="/post/2014/05/28/steam-runtime-without-steam/#Solution.1:.The.wrapper.script">a wrapper script</a>.</li>
<li>Using <a href="/post/2014/05/28/steam-runtime-without-steam/#Solution.2:.Embedded.search.path">an &ldquo;embedded search path&rdquo;</a>.</li>
</ol>


<p>If you&rsquo;re wondering why you would prefer the second approach, that
section starts with a rundown of the benefits inherent to it!</p>

<!-- more -->


<a name="Assumptions"></a>
<h2>Assumptions</h2>

<p>The remainder of this article makes a few assumptions, no matter which
of the two approaches you choose.</p>

<p>I assume that you&rsquo;ve extracted the steam-runtime into a directory named
<code>steam-runtime/</code> next to the executable. The easiest way to do this is
to use the two helper scripts I wrote, see the section on <a href="/post/2014/05/28/steam-runtime-without-steam/#Preparing.the.steam-runtime.for.repackaging">repackaging
the steam-runtime</a>. You should include the steam-runtime
directory when distributing <em>outside of</em> Steam, and distribute the exact
same package <strong>except</strong> for the steam-runtime directory when
distributing <em>through</em> Steam.</p>

<p>Excluding the steam-runtime can be done trivially inside your Steam
depot build script. Assuming you&rsquo;re building a depot from <code>build/linux</code>
(relative to your ContentRoot) with the binary living directly in that
directory, your script would contain something like this:</p>

<pre><code>"DepotBuildConfig"
{
    "DepotID" "1001"

    "FileMapping"
    {
        "LocalPath" "build\linux\*"
        "DepotPath" "."
        "recursive" "1"
    }

    "FileExclusion" "build\linux\steam-runtime"
}
</code></pre>

<p>It&rsquo;s worth noting that the FileExclusion is matched against your local
paths, not your depot paths, and it is implicitly recursive (the latter
doesn&rsquo;t seem to be documented <a href="https://partner.steamgames.com/documentation/steampipe">in the SteamPipe docs</a> as
of 2014-05-28.)</p>

<p>I assume you&rsquo;re already building your game with <a href="https://github.com/ValveSoftware/steam-runtime">the steam-runtime
SDK</a>. This is how you make sure your game is depending on
the right version of the libraries.</p>

<p>Finally, for simplicity sake I&rsquo;m also assuming you don&rsquo;t mind ~100MB of
additional data in your package, which is the size of the entire
steam-runtime for one architecture. If this is too much for you, you can
always manually strip out any unneeded libraries from the runtime.</p>

<a name="Preparing.the.steam-runtime.for.repackaging"></a>
<h3>Preparing the steam-runtime for repackaging</h3>

<p>I&rsquo;ve created <a href="https://github.com/jorgenpt/steam-runtime-helpers">two helper scripts</a>, one to make sure
you&rsquo;ve <a href="https://github.com/jorgenpt/steam-runtime-helpers/blob/master/update_runtime.sh">downloaded the latest runtime</a>, and one to <a href="https://github.com/jorgenpt/steam-runtime-helpers/blob/master/extract_runtime.sh">extract
the parts of the runtime you care about</a> (to reduce runtime
size from 400MB to 100MB, by excluding documentation and whatever
architecture you&rsquo;re <strong>not</strong> using.)</p>

<p>You would invoke them like this to download the latest runtime and
extract the 64bit libraries from it into the <code>build/linux/steam-runtime</code>
directory.</p>

<pre><code>./update_runtime.sh
./extract_runtime.sh steam-runtime-release_latest.tar.xz amd64 build/linux/steam-runtime
</code></pre>

<a name="Solution.1:.The.wrapper.script"></a>
<h2>Solution 1: The wrapper script</h2>

<p>The least invasive way to accomplish what we want is to basically do
what Steam does: Set up the runtime environment variables via
<code>LD_LIBRARY_PATH</code>, and launch the main binary.</p>

<p>To make it even easier, I&rsquo;ve put together <a href="https://github.com/jorgenpt/steam-runtime-helpers/blob/master/launch_wrapper.sh">a little wrapper
script</a> that does exactly that. Name the script <code>foo.sh</code>
or <code>foo</code>, and put it in the same directory as your executable, which it
will then assume is named <code>foo.bin</code>.</p>

<p>The script should gracefully handle being launched from Steam, as it&rsquo;ll
detect that the runtime has already been set up.</p>

<a name="Solution.2:.Embedded.search.path"></a>
<h2>Solution 2: Embedded search path</h2>

<p>First off, why would you prefer this approach to using a wrapper script?</p>

<ul>
<li>Shell scripts are fragile &ndash; it&rsquo;s easy to get something wrong, like
incorrectly handling spaces in filenames, or something equally silly.</li>
<li>A shell script gives you another file that you have to be careful to
maintain the executable bit on.</li>
<li>Shell scripts are text files, and your VCS / publishing process might
mangle the line endings, which makes everyone sad (<code>bad interpreter:
/bin/bash^M: no such file or directory</code>)</li>
<li>A customer could accidentally launch the wrong thing (i.e. the
<code>.bin</code>-file rather than the script), which might work on some
machines, fail in subtle ways on other machines, and not work at all
on the rest of them.</li>
<li>Launching the game in a debugger requires more complexity in your
script, like the <code>--gdb</code> logic in
<a href="https://github.com/jorgenpt/steam-runtime-helpers/blob/master/launch_wrapper.sh">launcher_wrapper.sh</a>, to make the game, but not the
debugger, pick up the runtime libraries.</li>
<li>If you launch any system binaries from outside of the runtime without
taking care to unset <code>LD_LIBRARY_PATH</code>, they will implicitly be using
the runtime libraries, which might not cause problems.</li>
</ul>


<p>The alternative to the wrapper script is using <code>DT_RPATH</code>, which I&rsquo;ve
talked about in <a href="/post/2014/05/20/dt-rpath-ld-and-at-rpath-dyld/">a previous blog post</a>. This approach is a
little more invasive to your build process, but overall it should
require less code.</p>

<p>Simply invoke your linker with the <code>-rpath</code> option pointing to various
subdirectories of the steam-runtime directory. For GCC and Clang, you
would add <code>-Wl,-rpath,&lt;path1&gt;:&lt;path2&gt;:...</code> to the linking step to
accomplish this.</p>

<p>These are the paths to the 64bit libraries in the steam-runtime:</p>

<ul>
<li>amd64/lib/x86_64-linux-gnu</li>
<li>amd64/lib</li>
<li>amd64/usr/lib/x86_64-linux-gnu</li>
<li>amd64/usr/lib</li>
</ul>


<p>These are the paths to the 32bit libraries:</p>

<ul>
<li>i386/lib/i386-linux-gnu</li>
<li>i386/lib</li>
<li>i386/usr/lib/i386-linux-gnu</li>
<li>i386/usr/lib</li>
</ul>


<p>Assuming you&rsquo;re using GCC and the steam-runtime lives next to the
executable, you&rsquo;d use these GCC options for a 64bit binary:</p>

<pre><code>-Wl,-z,origin -Wl,-rpath,$ORIGIN/steam-runtime/amd64/lib/x86_64-linux-gnu:$ORIGIN/steam-runtime/amd64/lib:$ORIGIN/steam-runtime/amd64/usr/lib/x86_64-linux-gnu:$ORIGIN/steam-runtime/amd64/usr/lib
</code></pre>

<p>And you would use these option for a 32bit binary:</p>

<pre><code>-Wl,-z,origin -Wl,-rpath,$ORIGIN/steam-runtime/i386/lib/i386-linux-gnu:$ORIGIN/steam-runtime/i386/lib:$ORIGIN/steam-runtime/i386/usr/lib/i386-linux-gnu:$ORIGIN/steam-runtime/i386/usr/lib
</code></pre>

<a name="Runtime.dependencies.of.the.steam-runtime"></a>
<h3>Runtime dependencies of the steam-runtime</h3>

<p>In addition to redirecting the ELF loader to the steam-runtime, there are some runtime dependencies within those dynamic libraries that need to be redirected as well. Luckily, Valve has done this work for us, and <a href="https://github.com/ValveSoftware/steam-runtime/tree/1a9c7173fc2092a7214eacdd0ffcbff3c5afe1e5/patches">patched these libraries to look elsewhere</a>. In order to know what the &ldquo;base&rdquo; of the runtime is, it looks at the <code>STEAM_RUNTIME</code> environment variable.</p>

<p>The first version of this post didn&rsquo;t include this detail, and you might&rsquo;ve run into errors like these:</p>

<pre><code>symbol lookup error: /usr/lib/x86_64-linux-gnu/gio/modules/libdconfsettings.so: undefined symbol: g_mapped_file_get_bytes
</code></pre>

<p>This is because glib has a <a href="https://github.com/ValveSoftware/steam-runtime/blob/1a9c7173fc2092a7214eacdd0ffcbff3c5afe1e5/patches/glib2.0/01_steam_runtime_path.patch#L16">runtime search for plugins</a> that directly calls <code>dlopen()</code> on an absolute path.</p>

<p>The solution to this problem is to have the first thing in your <code>main()</code> method on Linux be:</p>

<pre><code class="c">if (!getenv("STEAM_RUNTIME")) {
    setenv("STEAM_RUNTIME", figureOutSteamRuntimePath(), 1);
}
</code></pre>

<p>A full sample for your <code>main()</code> is <a href="https://github.com/jorgenpt/steam-runtime-helpers/blob/master/sample_embedded_path_main.c">available in the helpers GitHub repository</a>.</p>

<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>With just a small modification to your build system and a ~100MB larger
distribution, you can make your executables run across a wide variety of
Linux distributions and user setups. I highly recommend the embedded
search path solution, which is what I used for <a href="http://www.uberent.com/pa/">Planetary
Annihilation</a>&rsquo;s Linux release.</p>

<p>When shipping your own steam-runtime, you are responsible for updating
the runtime. The date of the latest update can be found inside the
<a href="http://media.steampowered.com/client/runtime/steam-runtime-release_latest.tar.xz.md5">runtime MD5 file</a>. In addition, you are responsible for
respecting the licenses of all the packages included in the runtime &ndash;
including any clauses regarding redistribution.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-contained game distribution on Linux]]></title>
    <link href="https://jorgen.tjer.no/post/2014/05/26/self-contained-game-distribution-on-linux/"/>
    <updated>2014-05-26T21:10:28-07:00</updated>
    <id>https://jorgen.tjer.no/post/2014/05/26/self-contained-game-distribution-on-linux</id>
    <content type="html"><![CDATA[<p>Distributing a game on Linux can be a little intimidating, and there are
definitely pitfalls. The main problem is making sure your game runs on
all of your users' machines, and outside of hardware and drivers, the
root of the problem is usually one of two things:</p>

<ol>
<li>You make an assumption about what libraries are present on the system.</li>
<li>You make an assumption about what version of a library is present on the system.</li>
</ol>


<p>This is very easy to accidentally do, as adding <code>-lSDL2</code> to the linker&rsquo;s
command line might work perfectly fine on your machine, but you forgot
that you installed SDL2 by hand 4 months ago. Another cause could be
that while <strong>your</strong> Linux distribution came with SDL2 preinstalled,
another distribution (that your users use) might not. Finally, maybe
your distribution came with v2 of some library, but your users only have
v1.</p>

<p>The best way to avoid this is to make your game distribution &ldquo;hermetic,&rdquo;
meaning that it contains all of its own dependencies. There are two main
ways to achieve this:</p>

<ol>
<li>Statically linking with all of your dependencies.</li>
<li>Dynamically linking with all of your dependencies, and pointing the
system&rsquo;s runtime loader at a copy of the libraries you bundle with
your game.</li>
</ol>


<p>Statically linking comes with its own set of problems, so this post
talks about solving the problem with dynamic linking.</p>

<a name="Introducing.the.steam-runtime"></a>
<h2>Introducing the steam-runtime</h2>

<p>It turns out that Valve has already solved this problem in Steam with
<a href="https://github.com/ValveSoftware/steam-runtime">something called the steam-runtime</a>. Contrary to what
its name indicates, it has <strong>no direct dependency on Steam nor does it
even assume that it is installed</strong>. It is merely a controlled set of
open source libraries (with some patches) and associated tools to use
those libraries - to make your game build hermetic.</p>

<!-- more -->


<p>If your game is running under Steam, you don&rsquo;t need to do much. Build
your game with the steam-runtime SDK, make sure all of your dependencies
exist inside of the runtime, and ship the game binaries to Steam. On the
receiving end, Steam will make sure that your users have the latest
version of the steam-runtime, and execute your game inside of it.</p>

<p>If you, like many others, also distribute your game outside of Steam,
you&rsquo;ll need to find another solution. The obvious solution is to build
on their work - it&rsquo;s an open source project that solves the problem
perfectly!</p>

<p>(<strong>Update:</strong> If you want to cut directly to the proposed solution, read
my <a href="/post/2014/05/28/steam-runtime-without-steam/">follow-up post on the details of using the steam-runtime without
depending on Steam</a>.)</p>

<a name="Workings.of.the.steam-runtime"></a>
<h2>Workings of the steam-runtime</h2>

<p>When I say that your game is executed &ldquo;inside&rdquo; of the runtime when
launched through Steam, I specifically mean that:</p>

<ul>
<li>The steam-runtime being present in some location Steam knows about</li>
<li>Steam sets the <code>LD_LIBRARY_PATH</code> environment variable before launching
your game to <a href="http://tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html#AEN80">instruct the dynamic loader to search the specified
directory for libraries</a>.</li>
</ul>


<p>This way, your game suddenly prefers the runtime versions of libraries
rather than your own. It&rsquo;s worth noting that if your game depends on a
library that is <strong>not</strong> present in the runtime, but the user has it
installed on their system, your game will run without error. This is
something to be wary of, since you don&rsquo;t know what version of the
library you&rsquo;re getting, and it&rsquo;ll fail to execute on some users'
systems.</p>

<p>The <a href="https://github.com/ValveSoftware/steam-runtime">runtime SDK</a> is just a set of tools that have been
told to look for libraries and headers inside the SDK rather than in the
system directories, so that the linker and compiler knows about the
right version of the libraries.</p>

<a name="Contents.of.the.runtime"></a>
<h2>Contents of the runtime</h2>

<p>Since the steam-runtime doesn&rsquo;t require Steam, let&rsquo;s take a look at what
the runtime contains, and see if there&rsquo;s a way to use this in our
non-Steam distributions.</p>

<p>You can find the runtime binaries hosted on the Steam CDN as a tar
archive:
<a href="http://media.steampowered.com/client/runtime/steam-runtime-release_latest.tar.xz">http://media.steampowered.com/client/runtime/steam-runtime-release_latest.tar.xz</a></p>

<p>I&rsquo;ve provided a script on GitHub that you can use to make sure you have
the latest runtime downloaded to the current directory. <a href="https://github.com/jorgenpt/steam-runtime-helpers/blob/master/update_runtime.sh">The helper
script is update_runtime.sh</a>.</p>

<p>The runtime tar archive contains some helper scripts, and the various
files needed for each library, as well as the libraries themselves. For
each library, there&rsquo;s a 32bit version (in the i386 directory) and a
64bit version (in the amd64 directory.)</p>

<p>Surprisingly enough, the runtime <em>also</em> contains (as of 2014-05-26) the
documentation needed for each library, which takes up almost half of the
space required by an extracted version of the runtime. To strip out the
documentation, and extract just the architecture you care about, I&rsquo;ve
written <a href="https://github.com/jorgenpt/steam-runtime-helpers/blob/master/extract_runtime.sh">another little helper script called
extract_runtime.sh</a>.</p>

<p>With this script, you&rsquo;ll be left with about ~100MB of libraries per
architecture. You can probably tailor the set of libraries for your
title to reduce the size even further, but that&rsquo;s left as an exercise
for the reader.</p>

<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>The Steam runtime is a useful collection of libraries that helps solve
the important problem of operating system fragmentation (different Linux
distributions, different versions). It has a lot of value outside of
Steam as well, and should be trivially re-usable for your non-Steam
distribution.</p>

<p><strong>Update</strong>: In the follow-up post, I cover <a href="/post/2014/05/28/steam-runtime-without-steam/">the details of distributing
a game that relies on the steam-runtime to hermetically seal its
environment, without depending on Steam</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DT_RPATH (ld) & @rpath (dyld)]]></title>
    <link href="https://jorgen.tjer.no/post/2014/05/20/dt-rpath-ld-and-at-rpath-dyld/"/>
    <updated>2014-05-20T22:06:29-07:00</updated>
    <id>https://jorgen.tjer.no/post/2014/05/20/dt-rpath-ld-and-at-rpath-dyld</id>
    <content type="html"><![CDATA[<p>Mac and Linux have two similarly named concepts that both deal with
dynamic loading, that behave quite differently: <code>@rpath</code> (under Mac OS
X&rsquo;s dyld) and <code>DT_RPATH</code> (or just rpath, under Linux' ld.)</p>

<p>Having done development (and more importantly, deployment) on both of
these platforms, I&rsquo;ve experienced first-hand how those concepts can get
a little jumbled in your mind, so here&rsquo;s a brief overview.</p>

<!-- more -->


<a name="DT_RPATH"></a>
<h2>DT_RPATH</h2>

<p>DT_RPATH, or more commonly just rpath, is a property set on an ELF
file<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. It points to a list of directories that the dynamic linker
will consider when loading a shared library. DT_RPATH is set at
link-time with the <code>-rpath</code> option to <code>ld</code>.  If you invoke <code>ld</code> through
<code>gcc</code> (or another compiler, like <code>g++</code>), then you can use the <code>-Wl</code>
option to pass arguments through to <code>ld</code>. You use commas to separate
arguments passed to <code>-Wl</code>.</p>

<pre><code>$ gcc program.c -lm -o program '-Wl,-rpath,$ORIGIN/lib'
$ ldd program | grep libm
        libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f3b9ad94000)
$ mkdir lib &amp;&amp; cp /lib/x86_64-linux-gnu/libm.so.6
$ ldd program | grep libm
        libm.so.6 =&gt; /home/jorgenpt/lib/libm.so.6 (0x00007f1440b0c000)
</code></pre>

<p>The snippet above also shows one of the three special variables<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> you
can include in an rpath, $ORIGIN. $ORIGIN gets replaced at runtime with
the directory in which our executable lives. DT_RPATH is transitive,
meaning it applies to any dependencies of our dependencies (unlike
DT_RUNPATH, but I won&rsquo;t talk about that here.) If our executable links
with libfoo, and libfoo depends on libbar, libfoo will include our rpath
in its search for libbar. (<strong>EDIT 2014-05-25</strong>: You might need
<code>-Wl,-z,origin</code> for GCC to allow $ORIGIN to be expanded.)</p>

<p>$ORIGIN is also commonly expanded by bash or zsh, so we use single
quotes around our <code>-Wl,-rpath,$ORIGIN/lib</code> option to prevent that from
happening. To make sure that $ORIGIN didn&rsquo;t get expanded, you can run
<code>readelf -d my_executable | grep -i rpath</code> to see the value of your
rpath, making sure it starts with <code>$ORIGIN</code>.</p>

<p>To specify multiple paths, separate them by a colon, like
<code>-Wl,-rpath,$ORIGIN/lib:$ORIGIN/lib/amd64</code>.</p>

<p>As you might be able to tell, rpath is great for creating self-contained
applications. You still have to be careful, as any libraries that are
missing from your rpath will still be (silently) searched for in the
system directories. I highly recommend asking users for <code>ldd</code> output if
you&rsquo;re trying to debug something with your dependencies.</p>

<p>Many people use LD_LIBRARY_PATH to achieve a similar effect.
LD_LIBRARY_PATH is not set at link-time, but rather as an environment
variable when your application is run. This is for example what <a href="https://github.com/ValveSoftware/steam-runtime">Valve&rsquo;s
steam-runtime</a> does to guarantee that your dynamically
linked libraries will be picked from the Steam runtime libraries rather
than the system libraries.</p>

<p>The benefit of using LD_LIBRARY_PATH is that it can be set for
applications you cannot edit, but the downside is that it also applies
to any applications launched by the application in question. Say that
you have an application that launches <code>dbus-send</code> or <code>aplay</code> &ndash; since
they&rsquo;re system applications, you&rsquo;d want them to pick their dependencies
from the system, not your LD_LIBRARY_PATH.</p>

<p>Interaction between LD_LIBRARY_PATH and your application&rsquo;s rpath is
well-defined: Your rpath is searched first, and anything it can&rsquo;t find
there it&rsquo;ll look for in LD_LIBRARY_PATH. Finally, if searches the
system directories<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.</p>

<a name="L.rpath"></a>
<h2>@rpath</h2>

<p>While @rpath is named similarly to its Linux cousin, it behaves a bit
differently. When you dynamically link to a library on Mac OS X, the
linker stores the &ldquo;install name&rdquo; of the library inside your executable.
The install name is something that comes from the dylib you&rsquo;re linking
against, and by default it is the absolute path of the linked file. You
can change the install name by modifying the dylib after linking<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.</p>

<p>After your application has been linked, you can change what the
application thinks the install name is for one of its dependent
libraries<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>.</p>

<p>Your application can set its own rpath at link-time using the same
<code>-Wl,-rpath,@executable_path</code> magic, but note that instead of $ORIGIN,
you use @executable_path or @loader_path. @executable_path behaves
like $ORIGIN, @loader_path is the directory of whatever object is doing the
loading, which could be a dylib that your application has loaded. For
details, <a href="https://wincent.com/wiki/@executable_path,_@load_path_and_@rpath">read this excellent article by Wincent Colaiuta</a> and
<a href="https://www.mikeash.com/pyblog/friday-qa-2009-11-06-linking-and-install-names.html">this blog post by Mike Ash</a>.</p>

<p>This rpath does <em>not</em> do anything by default. To make it take effect,
the install name for the shared library has to start with <code>@rpath/</code> &ndash;
and the dynamic linker will then substitute each of the possible values
for <code>@rpath</code> in order. This means that you&rsquo;ll typically change the
install name of the dylib (if it&rsquo;s a dylib you built yourself) or change
the install name inside the application.</p>

<p>Under Mac OS X, you have the DYLD_LIBRARY_PATH environment variable &ndash;
and this behaves just like it does on Linux. When DYLD_LIBRARY_PATH is
set, it is checked before the install name (and therefore, @rpath) is
consulted.</p>

<a name="Conclusion"></a>
<h2>Conclusion</h2>

<p>Hopefully this helps you understand some nuances of dynamic linking on
Mac OS X versus Linux. In my next blog post, I hope to show how you can
use DT_RPATH on Linux to link with the Steam runtime when distributing
your game outside of Steam.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>This also applies to .so&rsquo;s - when one of your dynamically loaded libraries load another dynamic library, their rpath is searched first (if any), then your main application&rsquo;s rpath is searched.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>The other two variables are <code>$LIB</code> and <code>$PLATFORM</code>, and they deal with finding architecture-specific binaries.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>The truth is a little more complicated, see the ld.so manpage for more info. (http://man7.org/linux/man-pages/man8/ld.so.8.html)<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>See the man page for install_name_tool (<code>install_name_tool -id @rpath/my.dylib my.dylib</code>)<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>See the man page for install_name_tool (<code>install_name_tool -change old.dylib @rpath/new.dylib my_application</code>)<a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
