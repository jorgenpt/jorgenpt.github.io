<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Jørgen's Blog]]></title>
  <link href="https://jorgen.tjer.no/blog/categories/android/atom.xml" rel="self"/>
  <link href="https://jorgen.tjer.no/"/>
  <updated>2021-03-13T20:12:13-08:00</updated>
  <id>https://jorgen.tjer.no/</id>
  <author>
    <name><![CDATA[Jørgen Tjernø]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Droidcon UK 2012: Slides & recap]]></title>
    <link href="https://jorgen.tjer.no/post/2012/10/28/droidcon-uk-2012-slides-recap/"/>
    <updated>2012-10-28T09:09:00-07:00</updated>
    <id>https://jorgen.tjer.no/post/2012/10/28/droidcon-uk-2012-slides-recap</id>
    <content type="html"><![CDATA[<p>On Friday I spoke at <a href="http://uk.droidcon.com">Droidcon UK 2012</a>, and it was my very first conference talk, titled <a href="http://uk.droidcon.com/2012/sessions/the-butler-did-it-continuously-building-enforcing-app-quality-using-jenkins/">The Butler Did It: Continuously building &amp; enforcing app quality using Jenkins</a>.</p>

<p>I did the talk together with <a href="http://chris.orr.me.uk/+">Christopher Orr</a>, and the topic was using <a href="http://jenkins-ci.org/">Jenkins CI</a> and <a href="http://code.google.com/p/gerrit/">Gerrit</a> to improve app quality when building Android software. It also included a short rant about the Android NDK. I thought it went surprisingly well, especially considering I was fueled by only 5 hours of sleep!</p>

<p>The turn-out was great - every seat was occupied, and we got a lot of interest in the form of questions afterwards. Here you can find the source material for our talk - our slides are pretty light on text, so we also have a version with a more fleshed out version of our speaker notes.</p>

<p>I&rsquo;ve been told by the Droidcon organizers that they&rsquo;ll publish the video from the talk. I&rsquo;ll post an update once that&rsquo;s available.</p>

<p>In addition, the demo doesn&rsquo;t have any audio or captioning so far, but hopefully we&rsquo;ll update soon with a narrated or captioned video.</p>

<ul>
<li><a href="https://dl.dropbox.com/u/987046/Presentations/droidcon_slides_with_notes.pdf">Slides with notes (PDF)</a></li>
<li><a href="https://dl.dropbox.com/u/987046/Presentations/droidcon_slides.pdf">Slides without notes (PDF)</a></li>
<li><a href="http://youtu.be/E3ZHBD1Med8">Jenkins &amp; Android demo (YouTube)</a></li>
</ul>


<p>If you&rsquo;d like to contact me or Chris, the contact information is on the last slide.</p>

<p><strong>EDIT April 2014</strong>: I finally found the video of the talk, it requires a (free) sign-up, and is <a href="https://skillsmatter.com/skillscasts/3729-the-butler-did-it-continuously-building-enforcing-app-quality-using-jenkins">available on SkillsMatter.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Requiring a minimum version of the Android SDK]]></title>
    <link href="https://jorgen.tjer.no/post/2012/06/05/requiring-a-minimum-version-of-the-android-sdk/"/>
    <updated>2012-06-05T16:40:00-07:00</updated>
    <id>https://jorgen.tjer.no/post/2012/06/05/requiring-a-minimum-version-of-the-android-sdk</id>
    <content type="html"><![CDATA[<p>(This is similar to <a href="/post/2012/03/02/requiring-a-minimum-version-of-the-android-ndk/">Requiring a minimum version of the Android NDK</a>, but for SDK versions)</p>

<p>Again, I was tinkering with our build system at work, which is a set of small Makefiles that are responsible for invoking ndk-build (to build our C component) and ant (for the Java component). These files also maintain the dependency graph for the cross-domain dependencies, so things like header files being generated from class-files using <code>javah</code> and APKs depending on the produced shared libraries.</p>

<p>I recently made some changes to the <code>ant</code> build step by creating <a href="https://gist.github.com/2878806">our own <code>custom_rules.xml</code></a>, exposing the &ldquo;hidden&rdquo; -compile target. What I noticed was that <code>build.xml</code> only did an <code>&lt;import file="custom_rules.xml" optional="true" /&gt;</code> if you were on a fairly recent Android SDK version. This isn&rsquo;t a problem for our Jenkins builds, since we&rsquo;ve got an in-house system that ensures a strict version dependency between a specific source checkout and SDK/NDK versions, so they were always using the newer SDK. It was a problem for our developers - we&rsquo;ve yet to roll this system to our development machines, so developers are responsible for checking out and updating their own SDKs.</p>

<p>To prevent this from getting in the way, I wrote a little snippet of bash that&rsquo;s run from the Makefile, that ensures that the SDK version is at least the given version.</p>

<p>You can find <a href="https://gist.github.com/2878774">the shellscript as a gist on GitHub</a></p>

<p>Put the script into <code>assert_sdk_version.sh</code>, and put the following at the top of your <code>Makefile</code>, and voilà! Builds should now fail with a more understandable message if someone&rsquo;s using the wrong NDK version. :-)</p>

<pre><code class="make Makefile">ifneq ($(shell $(LOCAL_PATH)/assert_sdk_version.sh "r19"),true)
  $(error SDK version r19 or greater required)
endif
</code></pre>

<p>If you&rsquo;re curious how this works: It checks the <code>tools/source.properties</code> file in your Android SDK, looking for a line like <code>Pkg.Revision=XX</code>, and extracts the version (<code>XX</code>) from that.</p>

<p>It&rsquo;s pretty straight forward, but I couldn&rsquo;t find anything online on how to check the SDK version from the command line, so I figured I&rsquo;d share it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Requiring a minimum version of the Android NDK]]></title>
    <link href="https://jorgen.tjer.no/post/2012/03/02/requiring-a-minimum-version-of-the-android-ndk/"/>
    <updated>2012-03-02T13:22:00-08:00</updated>
    <id>https://jorgen.tjer.no/post/2012/03/02/requiring-a-minimum-version-of-the-android-ndk</id>
    <content type="html"><![CDATA[<p>I was tinkering with our build system at work, and I realized that builds were failing on r5b and below. After a bit of debugging (and reading the NDK changelog), I realized that <code>LOCAL_WHOLE_STATIC_LIBRARIES</code> was broken in r5b and missing in r4 and before. To prevent other engineers from running into this, I wanted to make our project depend on r5c or above.</p>

<p>There doesn&rsquo;t seem to be a facility in place to do this, so I created a shellscript you can invoke from your <code>Makefile</code> to assert that the right version of the NDK is present. You can find <a href="https://gist.github.com/1961404">the shellscript as a gist on GitHub</a></p>

<p><strong>EDIT</strong>: This script depends on the environment variable ANDROID_NDK_ROOT to point to the base of your NDK. The script has been updated to test that this is the case (thanks to David R. for pointing this out).</p>

<p>The only caveat is that it does <em>not</em> support asserting versions below r5 - this is because only r5 and above have a version identifier in the NDK tree. It will correctly identify r4 and below as not being good enough for your build, but you can&rsquo;t say &ldquo;I need r3 or above&rdquo;.</p>

<p>Put the script into <code>jni/assert_ndk_version.sh</code>, and put the following at the top of your <code>jni/Android.mk</code>, and voilà! Builds should now fail with a more understandable message if someone&rsquo;s using the wrong NDK version. :-)</p>

<pre><code class="make jni/Android.mk">ifneq ($(shell $(LOCAL_PATH)/assert_ndk_version.sh "r5c"),true)
  $(error NDK version r5c or greater required)
endif
</code></pre>
]]></content>
  </entry>
  
</feed>
