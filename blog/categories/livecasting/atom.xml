<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: livecasting | Jørgen's Blog]]></title>
  <link href="https://jorgen.tjer.no/blog/categories/livecasting/atom.xml" rel="self"/>
  <link href="https://jorgen.tjer.no/"/>
  <updated>2019-01-10T17:31:05-08:00</updated>
  <id>https://jorgen.tjer.no/</id>
  <author>
    <name><![CDATA[Jørgen Tjernø]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Livecasting your desktop in OS X]]></title>
    <link href="https://jorgen.tjer.no/post/2012/04/21/livecasting-osx-desktop/"/>
    <updated>2012-04-21T00:04:00-07:00</updated>
    <id>https://jorgen.tjer.no/post/2012/04/21/livecasting-osx-desktop</id>
    <content type="html"><![CDATA[<p><strong>EDIT</strong>: Found a way to get audio using Soundflower &amp; sox.<br/>
<strong>EDIT 2</strong>: RTP+SDP was somehow garbling the output, new and improved script now uses FIFOs!</p>

<p>Turns out that livecasting your desktop in OS X is surprisingly hard. I found two ways online, none of which satisfied me, so I hunted for my own.</p>

<a name="Adobe.Flash.Media.Live.Encoder..CamTwist..amp..Soundflower"></a>
<h3>Adobe Flash Media Live Encoder, CamTwist &amp; Soundflower</h3>

<p>This method, <a href="http://www.mikechambers.com/blog/2011/05/29/setting-up-desktop-streaming-on-mac-os-x/">described by Mike Chambers</a>, relied on three separate GUI tools (one of which was required the Adobe Flash Media Live Encoder), consumed all my CPU, and refused to support my 16:10 aspect ratio. Yikes.</p>

<a name="Ustream.Producer"></a>
<h3>Ustream Producer</h3>

<p><a href="http://www.ustream.tv/producer">One simple app</a> to do everything, but sadly it only supports streaming to Ucast, downscales to somewhere near the resolution of a feature-phone from 2000, and still constantly complains that I don&rsquo;t have enough bandwidth. You can get the &ldquo;Pro&rdquo; version for $200 which gives you &ldquo;HD Broadcasting&rdquo; - but no thanks.</p>

<a name="My.own"></a>
<h3>My own</h3>

<p>So, based on <a href="http://unethicalblogger.com/2012/04/04/live-coding-with-ffmpeg.html">Tyler&rsquo;s Linux approach</a>, I tried getting something similar working on OS X. It only used ffmpeg, and seemed to work pretty well.</p>

<p>Surprisingly, my researched ended up with the following results:
 1. <code>ffmpeg</code> doesn&rsquo;t support screen grabbing on OS X
 1. <code>ffmpeg</code> doesn&rsquo;t have a single audio input that can read an audio device on OS X (see OpenAL section below)
 1. <code>ffmpeg</code> can&rsquo;t record a web cam on OS X (this would allow me to use CamTwist as an input source)
 1. VLC doesn&rsquo;t support streaming to an RTMP server
 1. VLC can&rsquo;t record from an audio device
 1. The only other app that&rsquo;d stream audio live from an audio device to a fifo or pipe was <code>sox</code>.</p>

<p>Any of these statements might be wrong, so please tell me if you know a way :)</p>

<p>So, the best I could do was have <a href="http://www.videolan.org/">VLC</a> stream the screen over a FIFO to <code>ffmpeg</code>, redirect audio through <a href="http://code.google.com/p/soundflower/">Soundflower</a>, then use <code>sox</code> to pipe audio to <code>ffmpeg</code>.
Finally, <code>ffmpeg</code> recodes all that data and sends it to the justin.tv RTMP server. Not very simple, but at least it works.</p>

<p>Turns out that this works best if you do <em>no</em> work in VLC other than spew to a FIFO: no encoding or encapsulating. Even using MPEG-TS had issues in this context. Raw video in a dummy mux is passed over the FIFO to <code>ffmpeg</code>, and <code>ffmpeg</code> is allowed to do all the encoding.</p>

<p>In any case, I figured I should share this with the rest of you.</p>

<p>Here&rsquo;s a modified version of <a href="http://unethicalblogger.com/2012/04/04/live-coding-with-ffmpeg.html">Tyler&rsquo;s script</a>:</p>

<p><div><script src='https://gist.github.com/2435006.js?file=stream.sh'></script>
<noscript><pre><code>#!/bin/sh -xe

API_KEY=&quot;YOUR_API_KEY_GOES_HERE&quot;
FPS=&quot;10&quot;
VLC_PATH=&quot;/Applications/VLC.app/Contents/MacOS/VLC&quot;
# I don&#39;t know how this&#39;ll behave on multimon, so you might want to hard-code.
# INRES=&#39;1440x900&#39;
INRES=$(osascript -e &#39;tell application &quot;Finder&quot; to get bounds of window of desktop&#39;|sed &#39;s/, /x/g&#39;|cut -f3- -dx)
OUTRES=&#39;1280x800&#39;
# You can change this to record microphone or something else, from man soxformat (under coreaudio):
# The valid names can be seen in the System Preferences-&gt;Sound menu and then under the Output and Input tabs.
COREAUDIO_DEVICE=&quot;Soundflower (2ch)&quot;

VIDEO_FIFO=/tmp/vlc-ffmpeg.raw
AUDIO_FIFO=/tmp/sox-ffmpeg.wav

for fifo in &quot;$VIDEO_FIFO&quot; &quot;$AUDIO_FIFO&quot;; do
  rm -f &quot;$fifo&quot;
  mkfifo &quot;$fifo&quot;
done

# This is called when you ^C or an app quits. It kills all the processes and deletes the FIFOs.
function cleanup() {
  trap &quot;&quot; EXIT INT

  [[ ! -z &quot;$vlc_pid&quot; ]] &amp;&amp; kill -9 &quot;$vlc_pid&quot;
  [[ ! -z &quot;$sox_pid&quot; ]] &amp;&amp; kill -9 &quot;$sox_pid&quot;
  [[ ! -z &quot;$ffmpeg_pid&quot; ]] &amp;&amp; kill -9 &quot;$ffmpeg_pid&quot;
  rm -f &quot;$VIDEO_FIFO&quot;
  rm -f &quot;$AUDIO_FIFO&quot;
}

trap &quot;cleanup&quot; EXIT INT

# VLC streams screen:// to $VIDEO_FIFO, in a raw BGRA format.
$VLC_PATH screen:// :screen-fps=&quot;$FPS&quot; -I dummy --sout &quot;file/dummy:$VIDEO_FIFO&quot; &amp;
vlc_pid=$!

# SOX streams $COREAUDIO_DEVICE to $AUDIO_FIFO (with an increased buffer size, 4MB)
sox --buffer 4194304 -q -c 2 -t coreaudio &quot;$COREAUDIO_DEVICE&quot; -t wav &quot;$AUDIO_FIFO&quot; &amp;
sox_pid=$!

# ffmpeg reads raw video from $VIDEO_FIFO, recodes it using libx264, combines it with mp3 that&#39;s been
# transcoded from $AUDIO_FIFO with LAME, and ships it as FLV to justin.tv&#39;s RTMP server.
ffmpeg -threads 0 \
  -f rawvideo -pix_fmt bgra -s &quot;$INRES&quot; -r &quot;$FPS&quot; -i &quot;$VIDEO_FIFO&quot; \
  -f wav -i &quot;$AUDIO_FIFO&quot; \
  -vcodec libx264 -s &quot;$OUTRES&quot; \
  -acodec libmp3lame -ab 128k -ar 44100 \
  -f flv &quot;rtmp://live.justin.tv/app/$API_KEY&quot; &amp;
ffmpeg_pid=$!

wait $ffmpeg_pid $sox_pid $vlc_pid</code></pre></noscript></div>
</p>

<a name="OpenAL.issues"></a>
<h4>OpenAL issues</h4>

<p><code>ffmpeg</code> can theoretically record input devices on OS X using OpenAL - which ships with OS X by default. I spent some time trying to get homebrew to build it (<a href="https://github.com/jorgenpt/homebrew/commit/d69e9d22ef2b0d04fc4f429e91918c034e19a068">patch here</a>), but when I finally got it building I realized <a href="http://ffmpeg.org/trac/ffmpeg/ticket/314">it was completely broken</a>. Yay!</p>
]]></content>
  </entry>
  
</feed>
